/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6284.27442 (NJsonSchema v8.11.6284.26855) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 租户是否可用
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 租户是否存在
     * @return Success
     */
    isTenantNameExist(input: IsTenantAvailableInput): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantNameExist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processIsTenantNameExist(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantNameExist(response));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processIsTenantNameExist(response: Response): boolean {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 注册
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRegister(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送密码重置邮箱
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendPasswordResetCode(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendPasswordResetCode(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendPasswordResetCode(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 重置密码
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processResetPassword(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetPassword(response));
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response);
        });
    }

    protected processResetPassword(response: Response): ResetPasswordOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ResetPasswordOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送激活邮件
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendEmailActivationLink(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendEmailActivationLink(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendEmailActivationLink(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 邮箱激活
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processActivateEmail(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processActivateEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processActivateEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 模拟(用户)登录
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processImpersonate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processImpersonate(response));
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response);
        });
    }

    protected processImpersonate(response: Response): ImpersonateOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 退出模拟登录
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processBackToImpersonator(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBackToImpersonator(response));
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response);
        });
    }

    protected processBackToImpersonator(response: Response): ImpersonateOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 关联账号
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSwitchToLinkedAccount(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSwitchToLinkedAccount(response));
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): SwitchToLinkedAccountOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SwitchToLinkedAccountOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取审计日志
     * @startDate 开始时间（UTC）
     * @endDate 结束时间
     * @userName 用户名
     * @serviceName 服务名称
     * @methodName 操作
     * @browserInfo 浏览器
     * @hasException 是否异常
     * @minExecutionDuration 最小执行时间
     * @maxExecutionDuration 最大执行时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAuditLogs(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogs(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogs(response: Response): PagedResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 导出审计日志到Excel
     * @startDate 开始时间（UTC）
     * @endDate 结束时间
     * @userName 用户名
     * @serviceName 服务名称
     * @methodName 操作
     * @browserInfo 浏览器
     * @hasException 是否异常
     * @minExecutionDuration 最小执行时间
     * @maxExecutionDuration 最大执行时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAuditLogsToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogsToExcel(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class BookingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取预约详情
     * @source 来源
     * @return Success
     */
    getJoinBookingInfo(source: string, id: number): Observable<JoinBookingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Booking/GetJoinBookingInfo?";
        if (source !== undefined)
            url_ += "Source=" + encodeURIComponent("" + source) + "&"; 
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetJoinBookingInfo(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetJoinBookingInfo(response));
                } catch (e) {
                    return <Observable<JoinBookingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<JoinBookingOutput>><any>Observable.throw(response);
        });
    }

    protected processGetJoinBookingInfo(response: Response): JoinBookingOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: JoinBookingOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? JoinBookingOutput.fromJS(resultData200) : new JoinBookingOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 应约
     * @return Success
     */
    joinBooking(input: JoinBookingInput): Observable<JoinBookingResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Booking/JoinBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processJoinBooking(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processJoinBooking(response));
                } catch (e) {
                    return <Observable<JoinBookingResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<JoinBookingResultDto>><any>Observable.throw(response);
        });
    }

    protected processJoinBooking(response: Response): JoinBookingResultDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: JoinBookingResultDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? JoinBookingResultDto.fromJS(resultData200) : new JoinBookingResultDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有缓存
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllCaches(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllCaches(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllCaches(response: Response): ListResultDtoOfCacheDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfCacheDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 清理缓存
     * @input 缓存Id
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processClearCache(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearCache(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearCache(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 清理所有缓存
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processClearAllCaches(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearAllCaches(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearAllCaches(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取会话好友
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUserChatFriendsWithSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserChatFriendsWithSettings(response));
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): GetUserChatFriendsWithSettingsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserChatFriendsWithSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取会话消息
     * @tenantId 租户Id(可空)
     * @userId 用户Id
     * @minMessageId 最小消息Id(可空)
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (minMessageId !== undefined)
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUserChatMessages(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserChatMessages(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response);
        });
    }

    protected processGetUserChatMessages(response: Response): ListResultDtoOfChatMessageDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfChatMessageDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 设置所有未读消息为已读
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMarkAllUnreadMessagesOfUserAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取版本信息(下拉框)
     * @return Success
     */
    getEditionsForCombobox(): Observable<ListResultDtoOfComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetEditionsForCombobox(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionsForCombobox(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfComboboxItemDto>><any>Observable.throw(response);
        });
    }

    protected processGetEditionsForCombobox(response: Response): ListResultDtoOfComboboxItemDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfComboboxItemDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfComboboxItemDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 查找用户
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processFindUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFindUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response);
        });
    }

    protected processFindUsers(response: Response): PagedResultDtoOfNameValueDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取默认版本名称
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetDefaultEditionName(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetDefaultEditionName(response));
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response);
        });
    }

    protected processGetDefaultEditionName(response: Response): GetDefaultEditionNameOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetDefaultEditionNameOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 根据枚举名称获取下拉框数据源
     * @enumName 枚举类型名称
     * @return Success
     */
    getEnumSelectItemSource(enumName: string): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEnumSelectItemSource?";
        if (enumName !== undefined)
            url_ += "enumName=" + encodeURIComponent("" + enumName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetEnumSelectItemSource(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEnumSelectItemSource(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetEnumSelectItemSource(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取全部版本信息
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetEditions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditions(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response);
        });
    }

    protected processGetEditions(response: Response): ListResultDtoOfEditionListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfEditionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取版本信息
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetEditionForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionForEdit(response));
                } catch (e) {
                    return <Observable<GetEditionForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetEditionForEdit(response: Response): GetEditionForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetEditionForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionForEditOutput.fromJS(resultData200) : new GetEditionForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建/更新版本
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateEdition(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateEdition(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除版本
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteEdition(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteEdition(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteEdition(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取版本信息(下拉框选项)
     * @return Success
     */
    getEditionComboboxItems(id: number): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetEditionComboboxItems(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionComboboxItems(response));
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetEditionComboboxItems(response: Response): ComboboxItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class FileServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 下载临时文件
     * @fileName 文件名称
     * @fileType 文件类型
     * @fileToken 文件 Token
     * @return Success
     */
    downloadTempFile(fileName: string, fileType: string, fileToken: string): Observable<void> {
        let url_ = this.baseUrl + "/api/File/DownloadTempFile?";
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        if (fileType !== undefined)
            url_ += "FileType=" + encodeURIComponent("" + fileType) + "&"; 
        if (fileToken !== undefined)
            url_ += "FileToken=" + encodeURIComponent("" + fileToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDownloadTempFile(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDownloadTempFile(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDownloadTempFile(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 云存储回调
     * @return Success
     */
    uploadPictureCallBack(input: UploadPictureInput): Observable<UploadPictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/File/UploadPictureCallBack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUploadPictureCallBack(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUploadPictureCallBack(response));
                } catch (e) {
                    return <Observable<UploadPictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UploadPictureOutput>><any>Observable.throw(response);
        });
    }

    protected processUploadPictureCallBack(response: Response): UploadPictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UploadPictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPictureOutput.fromJS(resultData200) : new UploadPictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取存储空间域名
     * @return Success
     */
    getBucketDomain(bucket: string): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/File/GetBucketDomain?";
        if (bucket !== undefined)
            url_ += "bucket=" + encodeURIComponent("" + bucket) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetBucketDomain(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetBucketDomain(response));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processGetBucketDomain(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 创建(添加)好友请求
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateFriendshipRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateFriendshipRequest(response));
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response);
        });
    }

    protected processCreateFriendshipRequest(response: Response): FriendDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 根据用户名创建添加好友请求
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateFriendshipRequestByUserName(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateFriendshipRequestByUserName(response));
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): FriendDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 添加黑名单
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processBlockUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBlockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processBlockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 解除黑名单
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUnblockUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnblockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnblockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 接受好友请求
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processAcceptFriendshipRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAcceptFriendshipRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取宿主所有设置
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllSettings(response));
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllSettings(response: Response): HostSettingsEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: HostSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新宿主所有设置
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateAllSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateAllSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateAllSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新第三方登陆配置(单条记录)
     * @return Success
     */
    updateExternalAuthentication(input: ExternalAuthenticationProviderEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateExternalAuthentication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateExternalAuthentication(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateExternalAuthentication(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateExternalAuthentication(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取验证码设置
     * @return Success
     */
    getVerificationCodeSettingsAsync(): Observable<VerificationCodeSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetVerificationCodeSettingsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetVerificationCodeSettingsAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetVerificationCodeSettingsAsync(response));
                } catch (e) {
                    return <Observable<VerificationCodeSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<VerificationCodeSettingsEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetVerificationCodeSettingsAsync(response: Response): VerificationCodeSettingsEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: VerificationCodeSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? VerificationCodeSettingsEditDto.fromJS(resultData200) : new VerificationCodeSettingsEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送测试邮件
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendTestEmail(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTestEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTestEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取语言
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetLanguages(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguages(response));
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLanguages(response: Response): GetLanguagesOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取语言详情
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetLanguageForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguageForEdit(response));
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLanguageForEdit(response: Response): GetLanguageForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLanguageForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建/编辑语言
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateLanguage(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除语言
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteLanguage(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 设置默认语言
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSetDefaultLanguage(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetDefaultLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetDefaultLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取语言翻译
     * @maxResultCount 结果数量(页大小)
     * @skipCount 跳过数量(页大小 * 页码)
     * @sorting 排序字段(eg : Key Desc )
     * @sourceName 源名称(eg:Xiaoyuyue,AbpZero,Abp)
     * @baseLanguageName 基础语言名称
     * @targetLanguageName 目标语言名称
     * @targetValueFilter 目标值过滤
     * @filterText 过滤文本
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName !== undefined)
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName !== undefined)
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetLanguageTexts(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguageTexts(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response);
        });
    }

    protected processGetLanguageTexts(response: Response): PagedResultDtoOfLanguageTextListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfLanguageTextListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新语言翻译
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateLanguageText(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateLanguageText(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateLanguageText(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class MessageServiceServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取可用指令
     * @return Success
     */
    getAvailableTokenList(): Observable<TokensListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MessageService/GetAvailableTokenList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAvailableTokenList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAvailableTokenList(response));
                } catch (e) {
                    return <Observable<TokensListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<TokensListDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetAvailableTokenList(response: Response): TokensListDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TokensListDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TokensListDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取用户通知
     * @state 通知状态（可空）
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUserNotifications(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserNotifications(response));
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserNotifications(response: Response): GetNotificationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetNotificationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 设置所有通知为已读
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSetAllNotificationsAsRead(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetAllNotificationsAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 设置通知为已读
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSetNotificationAsRead(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetNotificationAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetNotificationAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取通知设置
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetNotificationSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetNotificationSettings(response));
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetNotificationSettings(response: Response): GetNotificationSettingsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetNotificationSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新通知设置
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateNotificationSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateNotificationSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateNotificationSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取组织单位
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOrganizationUnits(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnits(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnits(response: Response): ListResultDtoOfOrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfOrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取组织单位成员
     * @id 组织单位Id(大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOrganizationUnitUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnitUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): PagedResultDtoOfOrganizationUnitUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfOrganizationUnitUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建组织单位
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processCreateOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新组织单位
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 移动组织单位
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processMoveOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMoveOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processMoveOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除组织单位
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 添加成员到组织单位
     * @return Success
     */
    addUserToOrganizationUnit(input: UserToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUserToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processAddUserToOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddUserToOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddUserToOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 把成员从组织单位移除
     * @userId 用户 Id(大于0)
     * @organizationUnitId 组织单位 Id(大于0)
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRemoveUserFromOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRemoveUserFromOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 成员是否已存在
     * @return Success
     */
    isInOrganizationUnit(input: UserToOrganizationUnitInput): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/IsInOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processIsInOrganizationUnit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsInOrganizationUnit(response));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processIsInOrganizationUnit(response: Response): boolean {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class OrgBookingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有预约
     * @name 预约名称
     * @outletId 门店Id
     * @isActive 是否激活
     * @startCreationTime 开始创建时间
     * @endCreationTime 结束创建时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getBookings(name: string, outletId: number, isActive: boolean, startCreationTime: moment.Moment, endCreationTime: moment.Moment, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookings?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (outletId !== undefined)
            url_ += "OutletId=" + encodeURIComponent("" + outletId) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (startCreationTime !== undefined)
            url_ += "StartCreationTime=" + encodeURIComponent("" + startCreationTime.toJSON()) + "&"; 
        if (endCreationTime !== undefined)
            url_ += "EndCreationTime=" + encodeURIComponent("" + endCreationTime.toJSON()) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetBookings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetBookings(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingListDto>><any>Observable.throw(response);
        });
    }

    protected processGetBookings(response: Response): PagedResultDtoOfBookingListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfBookingListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingListDto.fromJS(resultData200) : new PagedResultDtoOfBookingListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取预约详情
     * @return Success
     */
    getBookingForEdit(id: number): Observable<GetBookingForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookingForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetBookingForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetBookingForEdit(response));
                } catch (e) {
                    return <Observable<GetBookingForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetBookingForEdit(response: Response): GetBookingForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetBookingForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingForEditOutput.fromJS(resultData200) : new GetBookingForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新预约
     * @return Success
     */
    createOrUpdateBooking(input: CreateOrUpdateBookingInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/CreateOrUpdateBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateBooking(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateBooking(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateBooking(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 激活/禁用 预约
     * @return Success
     */
    activedOrDisableBooking(input: ActiveOrDisableInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/ActivedOrDisableBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processActivedOrDisableBooking(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processActivedOrDisableBooking(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processActivedOrDisableBooking(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除预约
     * @return Success
     */
    deleteBooking(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/DeleteBooking?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteBooking(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteBooking(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteBooking(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取时间
     * @return Success
     */
    getItemDatetime(tenantId: number, name: string, description: string, hint: string, templateId: number, contactorId: number, contactor_Name: string, contactor_PhoneNumber: string, contactor_WechatQrcodeUrl: string, contactor_TenantId: number, contactor_OutletId: number, contactor_IsDefault: boolean, contactor_CreationTime: moment.Moment, contactor_CreatorUserId: number, contactor_Id: number, outletId: number, outlet_TenantId: number, outlet_Name: string, outlet_Longitude: string, outlet_PhoneNum: string, outlet_BusinessHours: string, outlet_Province: string, outlet_ProvinceId: number, outlet_City: string, outlet_CityId: number, outlet_District: string, outlet_DistrictId: number, outlet_DetailAddress: string, outlet_PictureId: number, outlet_IsActive: boolean, outlet_Contactors: any[], outlet_IsDeleted: boolean, outlet_DeleterUserId: number, outlet_DeletionTime: moment.Moment, outlet_LastModificationTime: moment.Moment, outlet_LastModifierUserId: number, outlet_CreationTime: moment.Moment, outlet_CreatorUserId: number, outlet_Id: number, needGender: boolean, needAge: boolean, needEmail: boolean, sticked: boolean, isActive: boolean, pV: number, uV: number, items: any[], pictures: any[], isDeleted: boolean, deleterUserId: number, deletionTime: moment.Moment, lastModificationTime: moment.Moment, lastModifierUserId: number, creationTime: moment.Moment, creatorUserId: number, id: number): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetItemDatetime?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&"; 
        if (hint !== undefined)
            url_ += "Hint=" + encodeURIComponent("" + hint) + "&"; 
        if (templateId !== undefined)
            url_ += "TemplateId=" + encodeURIComponent("" + templateId) + "&"; 
        if (contactorId !== undefined)
            url_ += "ContactorId=" + encodeURIComponent("" + contactorId) + "&"; 
        if (contactor_Name !== undefined)
            url_ += "Contactor.Name=" + encodeURIComponent("" + contactor_Name) + "&"; 
        if (contactor_PhoneNumber !== undefined)
            url_ += "Contactor.PhoneNumber=" + encodeURIComponent("" + contactor_PhoneNumber) + "&"; 
        if (contactor_WechatQrcodeUrl !== undefined)
            url_ += "Contactor.WechatQrcodeUrl=" + encodeURIComponent("" + contactor_WechatQrcodeUrl) + "&"; 
        if (contactor_TenantId !== undefined)
            url_ += "Contactor.TenantId=" + encodeURIComponent("" + contactor_TenantId) + "&"; 
        if (contactor_OutletId !== undefined)
            url_ += "Contactor.OutletId=" + encodeURIComponent("" + contactor_OutletId) + "&"; 
        if (contactor_IsDefault !== undefined)
            url_ += "Contactor.IsDefault=" + encodeURIComponent("" + contactor_IsDefault) + "&"; 
        if (contactor_CreationTime !== undefined)
            url_ += "Contactor.CreationTime=" + encodeURIComponent("" + contactor_CreationTime.toJSON()) + "&"; 
        if (contactor_CreatorUserId !== undefined)
            url_ += "Contactor.CreatorUserId=" + encodeURIComponent("" + contactor_CreatorUserId) + "&"; 
        if (contactor_Id !== undefined)
            url_ += "Contactor.Id=" + encodeURIComponent("" + contactor_Id) + "&"; 
        if (outletId !== undefined)
            url_ += "OutletId=" + encodeURIComponent("" + outletId) + "&"; 
        if (outlet_TenantId !== undefined)
            url_ += "Outlet.TenantId=" + encodeURIComponent("" + outlet_TenantId) + "&"; 
        if (outlet_Name !== undefined)
            url_ += "Outlet.Name=" + encodeURIComponent("" + outlet_Name) + "&"; 
        if (outlet_Longitude !== undefined)
            url_ += "Outlet.Longitude=" + encodeURIComponent("" + outlet_Longitude) + "&"; 
        if (outlet_PhoneNum !== undefined)
            url_ += "Outlet.PhoneNum=" + encodeURIComponent("" + outlet_PhoneNum) + "&"; 
        if (outlet_BusinessHours !== undefined)
            url_ += "Outlet.BusinessHours=" + encodeURIComponent("" + outlet_BusinessHours) + "&"; 
        if (outlet_Province !== undefined)
            url_ += "Outlet.Province=" + encodeURIComponent("" + outlet_Province) + "&"; 
        if (outlet_ProvinceId !== undefined)
            url_ += "Outlet.ProvinceId=" + encodeURIComponent("" + outlet_ProvinceId) + "&"; 
        if (outlet_City !== undefined)
            url_ += "Outlet.City=" + encodeURIComponent("" + outlet_City) + "&"; 
        if (outlet_CityId !== undefined)
            url_ += "Outlet.CityId=" + encodeURIComponent("" + outlet_CityId) + "&"; 
        if (outlet_District !== undefined)
            url_ += "Outlet.District=" + encodeURIComponent("" + outlet_District) + "&"; 
        if (outlet_DistrictId !== undefined)
            url_ += "Outlet.DistrictId=" + encodeURIComponent("" + outlet_DistrictId) + "&"; 
        if (outlet_DetailAddress !== undefined)
            url_ += "Outlet.DetailAddress=" + encodeURIComponent("" + outlet_DetailAddress) + "&"; 
        if (outlet_PictureId !== undefined)
            url_ += "Outlet.PictureId=" + encodeURIComponent("" + outlet_PictureId) + "&"; 
        if (outlet_IsActive !== undefined)
            url_ += "Outlet.IsActive=" + encodeURIComponent("" + outlet_IsActive) + "&"; 
        if (outlet_Contactors !== undefined)
            outlet_Contactors.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Outlet.Contactors[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (outlet_IsDeleted !== undefined)
            url_ += "Outlet.IsDeleted=" + encodeURIComponent("" + outlet_IsDeleted) + "&"; 
        if (outlet_DeleterUserId !== undefined)
            url_ += "Outlet.DeleterUserId=" + encodeURIComponent("" + outlet_DeleterUserId) + "&"; 
        if (outlet_DeletionTime !== undefined)
            url_ += "Outlet.DeletionTime=" + encodeURIComponent("" + outlet_DeletionTime.toJSON()) + "&"; 
        if (outlet_LastModificationTime !== undefined)
            url_ += "Outlet.LastModificationTime=" + encodeURIComponent("" + outlet_LastModificationTime.toJSON()) + "&"; 
        if (outlet_LastModifierUserId !== undefined)
            url_ += "Outlet.LastModifierUserId=" + encodeURIComponent("" + outlet_LastModifierUserId) + "&"; 
        if (outlet_CreationTime !== undefined)
            url_ += "Outlet.CreationTime=" + encodeURIComponent("" + outlet_CreationTime.toJSON()) + "&"; 
        if (outlet_CreatorUserId !== undefined)
            url_ += "Outlet.CreatorUserId=" + encodeURIComponent("" + outlet_CreatorUserId) + "&"; 
        if (outlet_Id !== undefined)
            url_ += "Outlet.Id=" + encodeURIComponent("" + outlet_Id) + "&"; 
        if (needGender !== undefined)
            url_ += "NeedGender=" + encodeURIComponent("" + needGender) + "&"; 
        if (needAge !== undefined)
            url_ += "NeedAge=" + encodeURIComponent("" + needAge) + "&"; 
        if (needEmail !== undefined)
            url_ += "NeedEmail=" + encodeURIComponent("" + needEmail) + "&"; 
        if (sticked !== undefined)
            url_ += "Sticked=" + encodeURIComponent("" + sticked) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (pV !== undefined)
            url_ += "PV=" + encodeURIComponent("" + pV) + "&"; 
        if (uV !== undefined)
            url_ += "UV=" + encodeURIComponent("" + uV) + "&"; 
        if (items !== undefined)
            items.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Items[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (pictures !== undefined)
            pictures.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Pictures[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (isDeleted !== undefined)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&"; 
        if (deleterUserId !== undefined)
            url_ += "DeleterUserId=" + encodeURIComponent("" + deleterUserId) + "&"; 
        if (deletionTime !== undefined)
            url_ += "DeletionTime=" + encodeURIComponent("" + deletionTime.toJSON()) + "&"; 
        if (lastModificationTime !== undefined)
            url_ += "LastModificationTime=" + encodeURIComponent("" + lastModificationTime.toJSON()) + "&"; 
        if (lastModifierUserId !== undefined)
            url_ += "LastModifierUserId=" + encodeURIComponent("" + lastModifierUserId) + "&"; 
        if (creationTime !== undefined)
            url_ += "CreationTime=" + encodeURIComponent("" + creationTime.toJSON()) + "&"; 
        if (creatorUserId !== undefined)
            url_ += "CreatorUserId=" + encodeURIComponent("" + creatorUserId) + "&"; 
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetItemDatetime(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetItemDatetime(response));
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response);
        });
    }

    protected processGetItemDatetime(response: Response): string[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class OrgBookingOrderServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有预约订单
     * @bookingName 预约名称
     * @customerName 客户名称
     * @bookingDate 预约开始时间
     * @startMinute 预约开始时间
     * @endMinute 预约结束时间
     * @phoneNumber 电话号码
     * @gender 性别
     * @creationDate 创建日期
     * @status 预约状态
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrders(bookingName: string, customerName: string, bookingDate: moment.Moment, startMinute: number, endMinute: number, phoneNumber: string, gender: Gender, creationDate: moment.Moment, status: Status[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingOrderListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/GetOrders?";
        if (bookingName !== undefined)
            url_ += "BookingName=" + encodeURIComponent("" + bookingName) + "&"; 
        if (customerName !== undefined)
            url_ += "CustomerName=" + encodeURIComponent("" + customerName) + "&"; 
        if (bookingDate !== undefined)
            url_ += "BookingDate=" + encodeURIComponent("" + bookingDate.toJSON()) + "&"; 
        if (startMinute !== undefined)
            url_ += "StartMinute=" + encodeURIComponent("" + startMinute) + "&"; 
        if (endMinute !== undefined)
            url_ += "EndMinute=" + encodeURIComponent("" + endMinute) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (gender !== undefined)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&"; 
        if (creationDate !== undefined)
            url_ += "CreationDate=" + encodeURIComponent("" + creationDate.toJSON()) + "&"; 
        if (status !== undefined)
            status.forEach(item => { url_ += "Status=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOrders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrders(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrders(response: Response): PagedResultDtoOfBookingOrderListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfBookingOrderListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingOrderListDto.fromJS(resultData200) : new PagedResultDtoOfBookingOrderListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取某个预约所有订单
     * @bookingId 预约Id
     * @customerName 客户名称
     * @bookingDate 预约开始时间
     * @startMinute 预约开始时间
     * @endMinute 预约结束时间
     * @phoneNumber 电话号码
     * @gender 性别
     * @creationDate 创建日期
     * @status 预约状态
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrders2Booking(bookingId: number, customerName: string, bookingDate: moment.Moment, startMinute: number, endMinute: number, phoneNumber: string, gender: Gender2, creationDate: moment.Moment, status: Status2[], sorting: string, maxResultCount: number, skipCount: number): Observable<BookingsOrderListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/GetOrders2Booking?";
        if (bookingId !== undefined)
            url_ += "BookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        if (customerName !== undefined)
            url_ += "CustomerName=" + encodeURIComponent("" + customerName) + "&"; 
        if (bookingDate !== undefined)
            url_ += "BookingDate=" + encodeURIComponent("" + bookingDate.toJSON()) + "&"; 
        if (startMinute !== undefined)
            url_ += "StartMinute=" + encodeURIComponent("" + startMinute) + "&"; 
        if (endMinute !== undefined)
            url_ += "EndMinute=" + encodeURIComponent("" + endMinute) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (gender !== undefined)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&"; 
        if (creationDate !== undefined)
            url_ += "CreationDate=" + encodeURIComponent("" + creationDate.toJSON()) + "&"; 
        if (status !== undefined)
            status.forEach(item => { url_ += "Status=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOrders2Booking(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrders2Booking(response));
                } catch (e) {
                    return <Observable<BookingsOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingsOrderListDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrders2Booking(response: Response): BookingsOrderListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: BookingsOrderListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BookingsOrderListDto.fromJS(resultData200) : new BookingsOrderListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 批量确认预约订单
     * @return Success
     */
    batchComfirmBookingOrder(input: BatchComfirmInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/BatchComfirmBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processBatchComfirmBookingOrder(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBatchComfirmBookingOrder(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processBatchComfirmBookingOrder(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 确认预约订单
     * @return Success
     */
    comfirmBookingOrder(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/ComfirmBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processComfirmBookingOrder(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processComfirmBookingOrder(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processComfirmBookingOrder(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 备注订单
     * @return Success
     */
    remarkBookingOrder(input: RemarkBookingOrderInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/RemarkBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRemarkBookingOrder(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRemarkBookingOrder(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRemarkBookingOrder(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class OutletServiceServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有门店
     * @name 名称
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOutlets(name: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOutletListDto> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutlets?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOutlets(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOutlets(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfOutletListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOutletListDto>><any>Observable.throw(response);
        });
    }

    protected processGetOutlets(response: Response): PagedResultDtoOfOutletListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfOutletListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOutletListDto.fromJS(resultData200) : new PagedResultDtoOfOutletListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取可用门店(下拉框)
     * @return Success
     */
    getOutletSelectList(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutletSelectList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOutletSelectList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOutletSelectList(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetOutletSelectList(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取门店详情
     * @return Success
     */
    getOutletForEdit(id: number): Observable<GetOutletForEditDto> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutletForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetOutletForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOutletForEdit(response));
                } catch (e) {
                    return <Observable<GetOutletForEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetOutletForEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetOutletForEdit(response: Response): GetOutletForEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetOutletForEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOutletForEditDto.fromJS(resultData200) : new GetOutletForEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新门店
     * @return Success
     */
    createOrUpdateOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOrUpdateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateOutlet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateOutlet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateOutlet(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除门店
     * @return Success
     */
    deleteOutlet(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/DeleteOutlet?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteOutlet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteOutlet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteOutlet(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取可用联系人(下拉框)
     * @return Success
     */
    getContactorSelectList(outletId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetContactorSelectList?";
        if (outletId !== undefined)
            url_ += "outletId=" + encodeURIComponent("" + outletId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetContactorSelectList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetContactorSelectList(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetContactorSelectList(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新联系人
     * @return Success
     */
    createOrUpdateContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOrUpdateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateContactor(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateContactor(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateContactor(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除联系人
     * @return Success
     */
    deleteContactor(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/DeleteContactor?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteContactor(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteContactor(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteContactor(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建门店
     * @return Success
     */
    createOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOutlet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOutlet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOutlet(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新门店
     * @return Success
     */
    updateOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/UpdateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateOutlet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateOutlet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateOutlet(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建联系人
     * @return Success
     */
    createContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateContactor(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateContactor(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateContactor(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新联系人
     * @return Success
     */
    updateContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/UpdateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateContactor(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateContactor(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateContactor(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class PerBookingOrderServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有预约订单
     * @bookingName 预约名称
     * @status 预约状态
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getBookingOrders(bookingName: string, status: Status3[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingOrderListDto> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/GetBookingOrders?";
        if (bookingName !== undefined)
            url_ += "BookingName=" + encodeURIComponent("" + bookingName) + "&"; 
        if (status !== undefined)
            status.forEach(item => { url_ += "Status=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetBookingOrders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetBookingOrders(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(response);
        });
    }

    protected processGetBookingOrders(response: Response): PagedResultDtoOfBookingOrderListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfBookingOrderListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingOrderListDto.fromJS(resultData200) : new PagedResultDtoOfBookingOrderListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取预约订单详情
     * @return Success
     */
    getBookingOrderForEdit(id: number): Observable<GetPersonBookingOrderOutput> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/GetBookingOrderForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetBookingOrderForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetBookingOrderForEdit(response));
                } catch (e) {
                    return <Observable<GetPersonBookingOrderOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPersonBookingOrderOutput>><any>Observable.throw(response);
        });
    }

    protected processGetBookingOrderForEdit(response: Response): GetPersonBookingOrderOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetPersonBookingOrderOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPersonBookingOrderOutput.fromJS(resultData200) : new GetPersonBookingOrderOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 取消订单
     * @return Success
     */
    cancelBookingOrder(input: CancelBookingOrderInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/CancelBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCancelBookingOrder(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCancelBookingOrder(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCancelBookingOrder(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 置顶预约订单
     * @return Success
     */
    stickedBookingOrder(input: StickedInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/StickedBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processStickedBookingOrder(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processStickedBookingOrder(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processStickedBookingOrder(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有权限
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllPermissions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllPermissions(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllPermissions(response: Response): ListResultDtoOfFlatPermissionWithLevelDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfFlatPermissionWithLevelDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class PictureServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取分组下的图片
     * @groupId 图片分组Id，-1 获取全部
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getPictureAsync(groupId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfPictureListDto> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureAsync?";
        if (groupId !== undefined)
            url_ += "GroupId=" + encodeURIComponent("" + groupId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetPictureAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPictureAsync(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfPictureListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfPictureListDto>><any>Observable.throw(response);
        });
    }

    protected processGetPictureAsync(response: Response): PagedResultDtoOfPictureListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfPictureListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfPictureListDto.fromJS(resultData200) : new PagedResultDtoOfPictureListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取当前用户上传图片凭证
     * @return Success
     */
    getPictureUploadToken(): Observable<UploadTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureUploadToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetPictureUploadToken(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPictureUploadToken(response));
                } catch (e) {
                    return <Observable<UploadTokenOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UploadTokenOutput>><any>Observable.throw(response);
        });
    }

    protected processGetPictureUploadToken(response: Response): UploadTokenOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UploadTokenOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadTokenOutput.fromJS(resultData200) : new UploadTokenOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 上传图片
     * @return Success
     */
    uploadAsync(groupId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/UploadAsync?";
        if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUploadAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUploadAsync(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUploadAsync(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新图片
     * @return Success
     */
    createOrUpdatePicture(input: CreateOrUpdatePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/CreateOrUpdatePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdatePicture(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdatePicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdatePicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除图片
     * @return Success
     */
    deleteAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteAsync(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteAsync(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有的图片分组
     * @return Success
     */
    getPictureGroupAsync(): Observable<PictureGroupListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureGroupAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetPictureGroupAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPictureGroupAsync(response));
                } catch (e) {
                    return <Observable<PictureGroupListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PictureGroupListDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetPictureGroupAsync(response: Response): PictureGroupListDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PictureGroupListDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PictureGroupListDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新图片分组
     * @return Success
     */
    createOrUpdatePictureGroup(input: CreateOrUpdatePictureGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/CreateOrUpdatePictureGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdatePictureGroup(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdatePictureGroup(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdatePictureGroup(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除图片分组
     * @return Success
     */
    deleteGroupAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteGroupAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteGroupAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteGroupAsync(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteGroupAsync(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取当前用户资料
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetCurrentUserProfileForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentUserProfileForEdit(response));
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): CurrentUserProfileEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CurrentUserProfileEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新当前用户资料
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateCurrentUserProfile(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateCurrentUserProfile(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 修改密码
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processChangePassword(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangePassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangePassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新头像
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateProfilePicture(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateProfilePicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateProfilePicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取密码复杂性设置
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetPasswordComplexitySetting(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPasswordComplexitySetting(response));
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): GetPasswordComplexitySettingOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetPasswordComplexitySettingOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取当前用户头像
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetProfilePicture(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProfilePicture(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetProfilePicture(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 根据Id获取好友头像
     * @profilePictureId 图片Id
     * @userId 用户Id
     * @tenantId 租户Id
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: number, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetFriendProfilePictureById(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetFriendProfilePictureById(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 根据 Id 获取头像
     * @profilePictureId 头像文件Id
     * @return Success
     */
    getProfilePictureById(profilePictureId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetProfilePictureById(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProfilePictureById(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetProfilePictureById(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 修改语言
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processChangeLanguage(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有角色
     * @displayName 显示名
     * @permission 权限
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getRoles(displayName: string, permission: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (displayName !== undefined)
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetRoles(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoles(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfRoleListDto>><any>Observable.throw(response);
        });
    }

    protected processGetRoles(response: Response): PagedResultDtoOfRoleListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfRoleListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfRoleListDto.fromJS(resultData200) : new PagedResultDtoOfRoleListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取角色详情
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetRoleForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoleForEdit(response));
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetRoleForEdit(response: Response): GetRoleForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetRoleForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新角色
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateRole(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除角色
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteRole(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取最近登录信息
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class SMSServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 发送(通知/内容)短信 (暂未实现)
     * @return Success
     */
    batchSendAsync(input: BatchSendSMSInput): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/BatchSendAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processBatchSendAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBatchSendAsync(response));
                } catch (e) {
                    return <Observable<SendResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SendResult>><any>Observable.throw(response);
        });
    }

    protected processBatchSendAsync(response: Response): SendResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SendResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送验证码
     * @return Success
     */
    sendCodeAsync(input: CodeSendInput): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/SendCodeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendCodeAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendCodeAsync(response));
                } catch (e) {
                    return <Observable<SendResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SendResult>><any>Observable.throw(response);
        });
    }

    protected processSendCodeAsync(response: Response): SendResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SendResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class SMSTemplateServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有短信模板
     * @name 短信模板名称
     * @templateCode 短信模板编码
     * @providerName 短信模板供应商
     * @isActived 是否激活(Null代表所有)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getSMSTemplates(name: string, templateCode: string, providerName: string, isActived: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSMSTemplateListDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplates?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (templateCode !== undefined)
            url_ += "TemplateCode=" + encodeURIComponent("" + templateCode) + "&"; 
        if (providerName !== undefined)
            url_ += "ProviderName=" + encodeURIComponent("" + providerName) + "&"; 
        if (isActived !== undefined)
            url_ += "IsActived=" + encodeURIComponent("" + isActived) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetSMSTemplates(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetSMSTemplates(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>Observable.throw(response);
        });
    }

    protected processGetSMSTemplates(response: Response): PagedResultDtoOfSMSTemplateListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfSMSTemplateListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSMSTemplateListDto.fromJS(resultData200) : new PagedResultDtoOfSMSTemplateListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有可用短信模板(下拉框)
     * @return Success
     */
    getAvailableSMSTemplates(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetAvailableSMSTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAvailableSMSTemplates(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAvailableSMSTemplates(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetAvailableSMSTemplates(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取短信模板详情
     * @return Success
     */
    getSMSTemplateForEdit(id: number): Observable<GetSMSTemplateForEditDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplateForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetSMSTemplateForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetSMSTemplateForEdit(response));
                } catch (e) {
                    return <Observable<GetSMSTemplateForEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSMSTemplateForEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetSMSTemplateForEdit(response: Response): GetSMSTemplateForEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetSMSTemplateForEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSMSTemplateForEditDto.fromJS(resultData200) : new GetSMSTemplateForEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 新建/更新短信模板
     * @return Success
     */
    createOrUpdate(input: CreateOrUpdateSMSTemplateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdate(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdate(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除短信模板
     * @return Success
     */
    deleteAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/DeleteAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteAsync(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteAsync(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteAsync(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取可用短信供应商
     * @return Success
     */
    getSMSProviders(): Observable<SMSProviderInfoDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSProviders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetSMSProviders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetSMSProviders(response));
                } catch (e) {
                    return <Observable<SMSProviderInfoDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SMSProviderInfoDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetSMSProviders(response: Response): SMSProviderInfoDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SMSProviderInfoDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SMSProviderInfoDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class StateServiceServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有省份
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @sorting 排序字段 (eg:Id DESC)
     * @return Success
     */
    getProvinces(maxResultCount: number, skipCount: number, sorting: string): Observable<PagedResultDtoOfProvinceListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetProvinces?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetProvinces(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProvinces(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfProvinceListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProvinceListDto>><any>Observable.throw(response);
        });
    }

    protected processGetProvinces(response: Response): PagedResultDtoOfProvinceListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfProvinceListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProvinceListDto.fromJS(resultData200) : new PagedResultDtoOfProvinceListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有可用省份(下拉框)
     * @return Success
     */
    getProvinceSelectList(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetProvinceSelectList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetProvinceSelectList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProvinceSelectList(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetProvinceSelectList(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新省份
     * @return Success
     */
    createOrUpdateProvince(input: CreateOrUpdateProvinceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateProvince";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateProvince(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateProvince(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateProvince(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除省份
     * @return Success
     */
    deleteProvince(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteProvince?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteProvince(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteProvince(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteProvince(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有城市
     * @provinceId 省份Id(必须大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getCitys(provinceId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCityListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetCitys?";
        if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetCitys(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCitys(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfCityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCityListDto>><any>Observable.throw(response);
        });
    }

    protected processGetCitys(response: Response): PagedResultDtoOfCityListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfCityListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCityListDto.fromJS(resultData200) : new PagedResultDtoOfCityListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有可用城市(下拉框)
     * @provinceId 省份id
     * @return Success
     */
    getCitySelectList(provinceId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetCitySelectList?";
        if (provinceId !== undefined)
            url_ += "provinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetCitySelectList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCitySelectList(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetCitySelectList(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新城市
     * @return Success
     */
    createOrUpdateCity(input: CreateOrUpdateCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateCity(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateCity(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateCity(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除城市
     * @return Success
     */
    deleteCity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteCity(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteCity(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteCity(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有区域
     * @ctyId 城市Id(必须大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getDistricts(ctyId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfDistrictListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetDistricts?";
        if (ctyId !== undefined)
            url_ += "CtyId=" + encodeURIComponent("" + ctyId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetDistricts(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetDistricts(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfDistrictListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfDistrictListDto>><any>Observable.throw(response);
        });
    }

    protected processGetDistricts(response: Response): PagedResultDtoOfDistrictListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfDistrictListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDistrictListDto.fromJS(resultData200) : new PagedResultDtoOfDistrictListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有可用区域(下拉框)
     * @cityId 城市id
     * @return Success
     */
    getDistrictSelectList(cityId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetDistrictSelectList?";
        if (cityId !== undefined)
            url_ += "cityId=" + encodeURIComponent("" + cityId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetDistrictSelectList(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetDistrictSelectList(response));
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetDistrictSelectList(response: Response): SelectListItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SelectListItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建或更新区域
     * @return Success
     */
    createOrUpdateDistrict(input: CreateOrUpdateDistrictInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateDistrict";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateDistrict(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateDistrict(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateDistrict(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除区域
     * @return Success
     */
    deleteDistrict(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteDistrict?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteDistrict(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteDistrict(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteDistrict(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有租户
     * @tenancyName 租户系统名称
     * @name 租户名称
     * @editionId 版本
     * @isActive 是否启用(空代表全部)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getTenants(tenancyName: string, name: string, editionId: number, isActive: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (tenancyName !== undefined)
            url_ += "TenancyName=" + encodeURIComponent("" + tenancyName) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTenants(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenants(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response);
        });
    }

    protected processGetTenants(response: Response): PagedResultDtoOfTenantListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfTenantListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建租户
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateTenant(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取租户详情
     * @return Success
     */
    getTenantForEdit(id: number): Observable<GetTenantForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTenantForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantForEdit(response));
                } catch (e) {
                    return <Observable<GetTenantForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetTenantForEdit(response: Response): GetTenantForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetTenantForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantForEditOutput.fromJS(resultData200) : new GetTenantForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新租户
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateTenant(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除租户
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteTenant(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取租户特性详情
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTenantFeaturesForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantFeaturesForEdit(response));
                } catch (e) {
                    return <Observable<GetTenantFeaturesForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): GetTenantFeaturesForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetTenantFeaturesForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesForEditOutput.fromJS(resultData200) : new GetTenantFeaturesForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新租户特性
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateTenantFeatures(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateTenantFeatures(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateTenantFeatures(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 重置租户详情
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processResetTenantSpecificFeatures(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetTenantSpecificFeatures(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 解锁租户
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUnlockTenantAdmin(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlockTenantAdmin(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlockTenantAdmin(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取活跃成员数量
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetMemberActivity(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetMemberActivity(response));
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response);
        });
    }

    protected processGetMemberActivity(response: Response): GetMemberActivityOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetMemberActivityOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantInfoServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取租户基本信息
     * @return Success
     */
    getTenantInfoForEdit(): Observable<TenantInfoEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/GetTenantInfoForEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTenantInfoForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantInfoForEdit(response));
                } catch (e) {
                    return <Observable<TenantInfoEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantInfoEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetTenantInfoForEdit(response: Response): TenantInfoEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantInfoEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantInfoEditDto.fromJS(resultData200) : new TenantInfoEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新租户资料
     * @return Success
     */
    updateTenantInfo(input: TenantInfoEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/UpdateTenantInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateTenantInfo(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateTenantInfo(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateTenantInfo(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 租户注册
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processRegisterTenant(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegisterTenant(response));
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response);
        });
    }

    protected processRegisterTenant(response: Response): RegisterTenantOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterTenantOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有设置
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetAllSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllSettings(response));
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllSettings(response: Response): TenantSettingsEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新设置
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateAllSettings(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateAllSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateAllSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 清除Logo
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processClearLogo(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearLogo(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearLogo(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 清除 Backgroud
     * @return Success
     */
    clearBackgroundPicture(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearBackgroundPicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processClearBackgroundPicture(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearBackgroundPicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearBackgroundPicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送测试邮件
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendTestEmail(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTestEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTestEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有时区
     * @defaultTimezoneScope 默认时区有效范围
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTimezones(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTimezones(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response);
        });
    }

    protected processGetTimezones(response: Response): ListResultDtoOfNameValueDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有时区(下拉框)
     * @selectedTimezoneId 选择时区Id
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetTimezoneComboboxItems(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTimezoneComboboxItems(response));
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): ComboboxItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 认证
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 发送双重认证码
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSendTwoFactorAuthCode(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTwoFactorAuthCode(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 模拟(用户)认证
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processImpersonatedAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processImpersonatedAuthenticate(response));
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): ImpersonatedAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonatedAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 关联用户认证
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processLinkedAccountAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLinkedAccountAuthenticate(response));
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): SwitchedAccountAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SwitchedAccountAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取第三方登陆供应商
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 第三方登陆认证
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 补充注册
     * @return Success
     */
    supplementaryExternalAuthenticate(model: SupplementaryExternalAuthModel): Observable<SupplementaryExternalAuthResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/SupplementaryExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processSupplementaryExternalAuthenticate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSupplementaryExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<SupplementaryExternalAuthResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SupplementaryExternalAuthResultModel>><any>Observable.throw(response);
        });
    }

    protected processSupplementaryExternalAuthenticate(response: Response): SupplementaryExternalAuthResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SupplementaryExternalAuthResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SupplementaryExternalAuthResultModel.fromJS(resultData200) : new SupplementaryExternalAuthResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 测试通知
     * @message 通知内容
     * @severity 通知类型
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processTestNotification(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processTestNotification(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processTestNotification(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取所有用户
     * @userName 用户名称
     * @surname 姓
     * @email 邮箱
     * @isEmailConfirmed 是否确认邮箱(可空)
     * @phoneNumber 电话号码
     * @isPhoneConfirmed 是否确认手机(可空)
     * @isActive 激活(可空)
     * @permission 权限
     * @roleIds 角色
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUsers(userName: string, surname: string, email: string, isEmailConfirmed: boolean, phoneNumber: string, isPhoneConfirmed: boolean, isActive: boolean, permission: string, roleIds: number[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (surname !== undefined)
            url_ += "Surname=" + encodeURIComponent("" + surname) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (isEmailConfirmed !== undefined)
            url_ += "IsEmailConfirmed=" + encodeURIComponent("" + isEmailConfirmed) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (isPhoneConfirmed !== undefined)
            url_ += "IsPhoneConfirmed=" + encodeURIComponent("" + isPhoneConfirmed) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (roleIds !== undefined)
            roleIds.forEach(item => { url_ += "RoleIds=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response);
        });
    }

    protected processGetUsers(response: Response): PagedResultDtoOfUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 导出用户到Excel
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUsersToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsersToExcel(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processGetUsersToExcel(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取用户详情
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUserForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserForEdit(response));
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserForEdit(response: Response): GetUserForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取用户权限详情
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetUserPermissionsForEdit(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserPermissionsForEdit(response));
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): GetUserPermissionsForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserPermissionsForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 重置用户权限
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processResetUserSpecificPermissions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetUserSpecificPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 更新用户权限
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUpdateUserPermissions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 创建/更新用户
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processCreateOrUpdateUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 删除用户
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDeleteUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 解锁用户
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUnlockUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 关联用户
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processLinkToUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLinkToUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processLinkToUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取所有关联用户
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getLinkedUsers(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetLinkedUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLinkedUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetLinkedUsers(response: Response): PagedResultDtoOfLinkedUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 获取当前用户的关联用户列表
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetRecentlyUsedLinkedUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRecentlyUsedLinkedUsers(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): ListResultDtoOfLinkedUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 取消关联
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processUnlinkUser(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlinkUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlinkUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取最近登录尝试
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetRecentUserLoginAttempts(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRecentUserLoginAttempts(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): ListResultDtoOfUserLoginAttemptDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfUserLoginAttemptDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * 获取最近日志
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processGetLatestWebLogs(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLatestWebLogs(response));
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLatestWebLogs(response: Response): GetLatestWebLogsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLatestWebLogsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * 下载日志
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((response) => {
            return this.processDownloadWebLogs(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDownloadWebLogs(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processDownloadWebLogs(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class IsTenantAvailableInput {
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput {
    /** 状态 */
    state: IsTenantAvailableOutputState;
    /** 租户Id */
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput {
    /** 名称 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 密码 */
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.registerCode = data["registerCode"] !== undefined ? data["registerCode"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["registerCode"] = this.registerCode !== undefined ? this.registerCode : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput {
    /** 能否登陆 */
    canLogin: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : undefined;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class SendPasswordResetCodeInput {
    /** 需要重置密码的账号邮箱 */
    emailAddress: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        return new SendPasswordResetCodeInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendPasswordResetCodeInput(JSON.parse(json));
    }
}

export class ResetPasswordInput {
    /** 用户Id */
    userId: number;
    /** 重置密码 Code */
    resetCode: string;
    /** 新密码 */
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.resetCode = data["resetCode"] !== undefined ? data["resetCode"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        return new ResetPasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["resetCode"] = this.resetCode !== undefined ? this.resetCode : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResetPasswordInput(JSON.parse(json));
    }
}

export class ResetPasswordOutput {
    /** 能否登陆 */
    canLogin: boolean;
    /** 用户名 */
    userName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        return new ResetPasswordOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResetPasswordOutput(JSON.parse(json));
    }
}

export class SendEmailActivationLinkInput {
    /** 待激活账号邮箱地址 */
    emailAddress: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        return new SendEmailActivationLinkInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendEmailActivationLinkInput(JSON.parse(json));
    }
}

export class ActivateEmailInput {
    /** 用户Id */
    userId: number;
    /** 确认码 */
    confirmationCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.confirmationCode = data["confirmationCode"] !== undefined ? data["confirmationCode"] : undefined;
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        return new ActivateEmailInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["confirmationCode"] = this.confirmationCode !== undefined ? this.confirmationCode : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActivateEmailInput(JSON.parse(json));
    }
}

export class ImpersonateInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id(大于0) */
    userId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
        }
    }

    static fromJS(data: any): ImpersonateInput {
        return new ImpersonateInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonateInput(JSON.parse(json));
    }
}

export class ImpersonateOutput {
    /** 模拟登陆凭证 */
    impersonationToken: string;
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.impersonationToken = data["impersonationToken"] !== undefined ? data["impersonationToken"] : undefined;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        return new ImpersonateOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["impersonationToken"] = this.impersonationToken !== undefined ? this.impersonationToken : undefined;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonateOutput(JSON.parse(json));
    }
}

export class SwitchToLinkedAccountInput {
    /** 租户Id(可空) */
    targetTenantId: number;
    /** 目标用户Id(大于0) */
    targetUserId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.targetTenantId = data["targetTenantId"] !== undefined ? data["targetTenantId"] : undefined;
            this.targetUserId = data["targetUserId"] !== undefined ? data["targetUserId"] : undefined;
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        return new SwitchToLinkedAccountInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["targetTenantId"] = this.targetTenantId !== undefined ? this.targetTenantId : undefined;
        data["targetUserId"] = this.targetUserId !== undefined ? this.targetUserId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchToLinkedAccountInput(JSON.parse(json));
    }
}

export class SwitchToLinkedAccountOutput {
    /** 切换账户令牌 */
    switchAccountToken: string;
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.switchAccountToken = data["switchAccountToken"] !== undefined ? data["switchAccountToken"] : undefined;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        return new SwitchToLinkedAccountOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["switchAccountToken"] = this.switchAccountToken !== undefined ? this.switchAccountToken : undefined;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchToLinkedAccountOutput(JSON.parse(json));
    }
}

export class PagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        return new PagedResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogListDto {
    /** 用户Id */
    userId: number;
    /** 用户名 */
    userName: string;
    /** 模拟登陆租户Id */
    impersonatorTenantId: number;
    /** 模拟登陆用户Id */
    impersonatorUserId: number;
    /** 服务名 */
    serviceName: string;
    /** Api名 */
    methodName: string;
    /** 参数 */
    parameters: string;
    /** 执行时间 */
    executionTime: moment.Moment;
    /** 执行时长 */
    executionDuration: number;
    /** 客户端地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 异常 */
    exception: string;
    /** 自定义数据 */
    customData: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.impersonatorTenantId = data["impersonatorTenantId"] !== undefined ? data["impersonatorTenantId"] : undefined;
            this.impersonatorUserId = data["impersonatorUserId"] !== undefined ? data["impersonatorUserId"] : undefined;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : undefined;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : undefined;
            this.parameters = data["parameters"] !== undefined ? data["parameters"] : undefined;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : undefined;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : undefined;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : undefined;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : undefined;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : undefined;
            this.exception = data["exception"] !== undefined ? data["exception"] : undefined;
            this.customData = data["customData"] !== undefined ? data["customData"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): AuditLogListDto {
        return new AuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["impersonatorTenantId"] = this.impersonatorTenantId !== undefined ? this.impersonatorTenantId : undefined;
        data["impersonatorUserId"] = this.impersonatorUserId !== undefined ? this.impersonatorUserId : undefined;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : undefined;
        data["methodName"] = this.methodName !== undefined ? this.methodName : undefined;
        data["parameters"] = this.parameters !== undefined ? this.parameters : undefined;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : undefined;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : undefined;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : undefined;
        data["clientName"] = this.clientName !== undefined ? this.clientName : undefined;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : undefined;
        data["exception"] = this.exception !== undefined ? this.exception : undefined;
        data["customData"] = this.customData !== undefined ? this.customData : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogListDto(JSON.parse(json));
    }
}

export class FileDto {
    /** 文件名称 */
    fileName: string;
    /** 文件类型 */
    fileType: string;
    /** 文件 Token */
    fileToken: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.fileName = data["fileName"] !== undefined ? data["fileName"] : undefined;
            this.fileType = data["fileType"] !== undefined ? data["fileType"] : undefined;
            this.fileToken = data["fileToken"] !== undefined ? data["fileToken"] : undefined;
        }
    }

    static fromJS(data: any): FileDto {
        return new FileDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["fileName"] = this.fileName !== undefined ? this.fileName : undefined;
        data["fileType"] = this.fileType !== undefined ? this.fileType : undefined;
        data["fileToken"] = this.fileToken !== undefined ? this.fileToken : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FileDto(JSON.parse(json));
    }
}

export class JoinBookingOutput {
    /** 机构信息 */
    organizationInfo: OrganizationInfoDto;
    /** 预约信息 */
    bookingInfo: JoinBookingInfoDto;
    /** 可预约时间 */
    availableDateItem: JoinBookingDataInfo[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.organizationInfo = data["organizationInfo"] ? OrganizationInfoDto.fromJS(data["organizationInfo"]) : undefined;
            this.bookingInfo = data["bookingInfo"] ? JoinBookingInfoDto.fromJS(data["bookingInfo"]) : undefined;
            if (data["availableDateItem"] && data["availableDateItem"].constructor === Array) {
                this.availableDateItem = [];
                for (let item of data["availableDateItem"])
                    this.availableDateItem.push(JoinBookingDataInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JoinBookingOutput {
        return new JoinBookingOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["organizationInfo"] = this.organizationInfo ? this.organizationInfo.toJS() : undefined;
        data["bookingInfo"] = this.bookingInfo ? this.bookingInfo.toJS() : undefined;
        if (this.availableDateItem && this.availableDateItem.constructor === Array) {
            data["availableDateItem"] = [];
            for (let item of this.availableDateItem)
                data["availableDateItem"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingOutput(JSON.parse(json));
    }
}

/** 机构信息 */
export class OrganizationInfoDto {
    /** 机构名称 */
    name: string;
    /** 描述/机构宣传语 */
    description: string;
    /** 宣传语 */
    tagline: string;
    /** logo */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureUrl: string;
    /** 门店图片地址 */
    outletPictureUrl: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.tagline = data["tagline"] !== undefined ? data["tagline"] : undefined;
            this.logoUrl = data["logoUrl"] !== undefined ? data["logoUrl"] : undefined;
            this.backgroundPictureUrl = data["backgroundPictureUrl"] !== undefined ? data["backgroundPictureUrl"] : undefined;
            this.outletPictureUrl = data["outletPictureUrl"] !== undefined ? data["outletPictureUrl"] : undefined;
        }
    }

    static fromJS(data: any): OrganizationInfoDto {
        return new OrganizationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["tagline"] = this.tagline !== undefined ? this.tagline : undefined;
        data["logoUrl"] = this.logoUrl !== undefined ? this.logoUrl : undefined;
        data["backgroundPictureUrl"] = this.backgroundPictureUrl !== undefined ? this.backgroundPictureUrl : undefined;
        data["outletPictureUrl"] = this.outletPictureUrl !== undefined ? this.outletPictureUrl : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationInfoDto(JSON.parse(json));
    }
}

export class JoinBookingInfoDto {
    orgName: string;
    /** 项目名称 */
    name: string;
    /** 项目描述 */
    description: string;
    /** 图片集合 */
    pictures: string[];
    /** 视频Url */
    videoUrl: string;
    /** 联系人名称 */
    contactorName: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人微信 */
    contactorWechatUrl: string;
    /** 门店名称 */
    outletName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 门店经纬度 */
    outletLongitude: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.orgName = data["orgName"] !== undefined ? data["orgName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(item);
            }
            this.videoUrl = data["videoUrl"] !== undefined ? data["videoUrl"] : undefined;
            this.contactorName = data["contactorName"] !== undefined ? data["contactorName"] : undefined;
            this.contactorPhoneNum = data["contactorPhoneNum"] !== undefined ? data["contactorPhoneNum"] : undefined;
            this.contactorWechatUrl = data["contactorWechatUrl"] !== undefined ? data["contactorWechatUrl"] : undefined;
            this.outletName = data["outletName"] !== undefined ? data["outletName"] : undefined;
            this.outletAddress = data["outletAddress"] !== undefined ? data["outletAddress"] : undefined;
            this.outletLongitude = data["outletLongitude"] !== undefined ? data["outletLongitude"] : undefined;
        }
    }

    static fromJS(data: any): JoinBookingInfoDto {
        return new JoinBookingInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["orgName"] = this.orgName !== undefined ? this.orgName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item);
        }
        data["videoUrl"] = this.videoUrl !== undefined ? this.videoUrl : undefined;
        data["contactorName"] = this.contactorName !== undefined ? this.contactorName : undefined;
        data["contactorPhoneNum"] = this.contactorPhoneNum !== undefined ? this.contactorPhoneNum : undefined;
        data["contactorWechatUrl"] = this.contactorWechatUrl !== undefined ? this.contactorWechatUrl : undefined;
        data["outletName"] = this.outletName !== undefined ? this.outletName : undefined;
        data["outletAddress"] = this.outletAddress !== undefined ? this.outletAddress : undefined;
        data["outletLongitude"] = this.outletLongitude !== undefined ? this.outletLongitude : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingInfoDto(JSON.parse(json));
    }
}

/** 日期信息 */
export class JoinBookingDataInfo {
    /** 日期 */
    date: moment.Moment;
    /** 可预约时间 */
    times: JoinBookingTimeInfo[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.date = data["date"] ? moment(data["date"].toString()) : undefined;
            if (data["times"] && data["times"].constructor === Array) {
                this.times = [];
                for (let item of data["times"])
                    this.times.push(JoinBookingTimeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JoinBookingDataInfo {
        return new JoinBookingDataInfo(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["date"] = this.date ? this.date.toISOString() : undefined;
        if (this.times && this.times.constructor === Array) {
            data["times"] = [];
            for (let item of this.times)
                data["times"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingDataInfo(JSON.parse(json));
    }
}

/** 时间信息 */
export class JoinBookingTimeInfo {
    /** 时间 */
    hourOfDay: string;
    /** 最大可预约人数 */
    maxBookingNum: number;
    /** 最大可排队人数 */
    maxQueueNum: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
            this.maxBookingNum = data["maxBookingNum"] !== undefined ? data["maxBookingNum"] : undefined;
            this.maxQueueNum = data["maxQueueNum"] !== undefined ? data["maxQueueNum"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): JoinBookingTimeInfo {
        return new JoinBookingTimeInfo(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        data["maxBookingNum"] = this.maxBookingNum !== undefined ? this.maxBookingNum : undefined;
        data["maxQueueNum"] = this.maxQueueNum !== undefined ? this.maxQueueNum : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingTimeInfo(JSON.parse(json));
    }
}

export class JoinBookingInput {
    /** 日期 */
    date: moment.Moment;
    /** 时间项Id */
    bookingItemId: number;
    /** 姓名 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: JoinBookingInputGender;
    /** 年龄 */
    age: number;
    /** 预约人数 */
    subscriberNum: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.date = data["date"] ? moment(data["date"].toString()) : undefined;
            this.bookingItemId = data["bookingItemId"] !== undefined ? data["bookingItemId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.gender = data["gender"] !== undefined ? data["gender"] : undefined;
            this.age = data["age"] !== undefined ? data["age"] : undefined;
            this.subscriberNum = data["subscriberNum"] !== undefined ? data["subscriberNum"] : undefined;
        }
    }

    static fromJS(data: any): JoinBookingInput {
        return new JoinBookingInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["date"] = this.date ? this.date.toISOString() : undefined;
        data["bookingItemId"] = this.bookingItemId !== undefined ? this.bookingItemId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["gender"] = this.gender !== undefined ? this.gender : undefined;
        data["age"] = this.age !== undefined ? this.age : undefined;
        data["subscriberNum"] = this.subscriberNum !== undefined ? this.subscriberNum : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingInput(JSON.parse(json));
    }
}

export class JoinBookingResultDto {
    /** 预约项目名称 */
    bookingName: string;
    /** 预约客户 */
    bookingCustomer: string;
    /** 预约日期 */
    bookingDate: moment.Moment;
    /** 预约时间 */
    hourOfDay: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bookingName = data["bookingName"] !== undefined ? data["bookingName"] : undefined;
            this.bookingCustomer = data["bookingCustomer"] !== undefined ? data["bookingCustomer"] : undefined;
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : undefined;
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
        }
    }

    static fromJS(data: any): JoinBookingResultDto {
        return new JoinBookingResultDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bookingName"] = this.bookingName !== undefined ? this.bookingName : undefined;
        data["bookingCustomer"] = this.bookingCustomer !== undefined ? this.bookingCustomer : undefined;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : undefined;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new JoinBookingResultDto(JSON.parse(json));
    }
}

export class ListResultDtoOfCacheDto {
    items: CacheDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        return new ListResultDtoOfCacheDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfCacheDto(JSON.parse(json));
    }
}

export class CacheDto {
    /** 缓存名称 */
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
        }
    }

    static fromJS(data: any): CacheDto {
        return new CacheDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CacheDto(JSON.parse(json));
    }
}

export class EntityDtoOfString {
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        return new EntityDtoOfString(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfString(JSON.parse(json));
    }
}

export class GetUserChatFriendsWithSettingsOutput {
    /** 服务器时间 */
    serverTime: moment.Moment;
    /** 好友集合 */
    friends: FriendDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : undefined;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        return new GetUserChatFriendsWithSettingsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : undefined;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserChatFriendsWithSettingsOutput(JSON.parse(json));
    }
}

export class FriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: number;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;

    constructor(data?: any) {
        if (data !== undefined) {
            this.friendUserId = data["friendUserId"] !== undefined ? data["friendUserId"] : undefined;
            this.friendTenantId = data["friendTenantId"] !== undefined ? data["friendTenantId"] : undefined;
            this.friendUserName = data["friendUserName"] !== undefined ? data["friendUserName"] : undefined;
            this.friendTenancyName = data["friendTenancyName"] !== undefined ? data["friendTenancyName"] : undefined;
            this.friendProfilePictureId = data["friendProfilePictureId"] !== undefined ? data["friendProfilePictureId"] : undefined;
            this.unreadMessageCount = data["unreadMessageCount"] !== undefined ? data["unreadMessageCount"] : undefined;
            this.isOnline = data["isOnline"] !== undefined ? data["isOnline"] : undefined;
            this.state = data["state"] !== undefined ? data["state"] : undefined;
        }
    }

    static fromJS(data: any): FriendDto {
        return new FriendDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["friendUserId"] = this.friendUserId !== undefined ? this.friendUserId : undefined;
        data["friendTenantId"] = this.friendTenantId !== undefined ? this.friendTenantId : undefined;
        data["friendUserName"] = this.friendUserName !== undefined ? this.friendUserName : undefined;
        data["friendTenancyName"] = this.friendTenancyName !== undefined ? this.friendTenancyName : undefined;
        data["friendProfilePictureId"] = this.friendProfilePictureId !== undefined ? this.friendProfilePictureId : undefined;
        data["unreadMessageCount"] = this.unreadMessageCount !== undefined ? this.unreadMessageCount : undefined;
        data["isOnline"] = this.isOnline !== undefined ? this.isOnline : undefined;
        data["state"] = this.state !== undefined ? this.state : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FriendDto(JSON.parse(json));
    }
}

export class ListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        return new ListResultDtoOfChatMessageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfChatMessageDto(JSON.parse(json));
    }
}

/** 会话消息 */
export class ChatMessageDto {
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 目标用户(接收者Id) */
    targetUserId: number;
    /** 目标租户Id */
    targetTenantId: number;
    /** 会话来源 */
    side: ChatMessageDtoSide;
    /** 读取状态 */
    readState: ChatMessageDtoReadState;
    /** 消息内容 */
    message: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.targetUserId = data["targetUserId"] !== undefined ? data["targetUserId"] : undefined;
            this.targetTenantId = data["targetTenantId"] !== undefined ? data["targetTenantId"] : undefined;
            this.side = data["side"] !== undefined ? data["side"] : undefined;
            this.readState = data["readState"] !== undefined ? data["readState"] : undefined;
            this.message = data["message"] !== undefined ? data["message"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): ChatMessageDto {
        return new ChatMessageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["targetUserId"] = this.targetUserId !== undefined ? this.targetUserId : undefined;
        data["targetTenantId"] = this.targetTenantId !== undefined ? this.targetTenantId : undefined;
        data["side"] = this.side !== undefined ? this.side : undefined;
        data["readState"] = this.readState !== undefined ? this.readState : undefined;
        data["message"] = this.message !== undefined ? this.message : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChatMessageDto(JSON.parse(json));
    }
}

export class MarkAllUnreadMessagesOfUserAsReadInput {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        return new MarkAllUnreadMessagesOfUserAsReadInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MarkAllUnreadMessagesOfUserAsReadInput(JSON.parse(json));
    }
}

export class ListResultDtoOfComboboxItemDto {
    items: ComboboxItemDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfComboboxItemDto {
        return new ListResultDtoOfComboboxItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfComboboxItemDto(JSON.parse(json));
    }
}

export class ComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.value = data["value"] !== undefined ? data["value"] : undefined;
            this.displayText = data["displayText"] !== undefined ? data["displayText"] : undefined;
            this.isSelected = data["isSelected"] !== undefined ? data["isSelected"] : undefined;
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        return new ComboboxItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["value"] = this.value !== undefined ? this.value : undefined;
        data["displayText"] = this.displayText !== undefined ? this.displayText : undefined;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ComboboxItemDto(JSON.parse(json));
    }
}

export class FindUsersInput {
    /** 租户Id */
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.maxResultCount = data["maxResultCount"] !== undefined ? data["maxResultCount"] : undefined;
            this.skipCount = data["skipCount"] !== undefined ? data["skipCount"] : undefined;
            this.filter = data["filter"] !== undefined ? data["filter"] : undefined;
        }
    }

    static fromJS(data: any): FindUsersInput {
        return new FindUsersInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : undefined;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : undefined;
        data["filter"] = this.filter !== undefined ? this.filter : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FindUsersInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        return new PagedResultDtoOfNameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfNameValueDto(JSON.parse(json));
    }
}

export class NameValueDto {
    name: string;
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.value = data["value"] !== undefined ? data["value"] : undefined;
        }
    }

    static fromJS(data: any): NameValueDto {
        return new NameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NameValueDto(JSON.parse(json));
    }
}

export class GetDefaultEditionNameOutput {
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        return new GetDefaultEditionNameOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetDefaultEditionNameOutput(JSON.parse(json));
    }
}

export class SelectListItemDto {
    text: string;
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.text = data["text"] !== undefined ? data["text"] : undefined;
            this.value = data["value"] !== undefined ? data["value"] : undefined;
        }
    }

    static fromJS(data: any): SelectListItemDto {
        return new SelectListItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["text"] = this.text !== undefined ? this.text : undefined;
        data["value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SelectListItemDto(JSON.parse(json));
    }
}

export class ListResultDtoOfEditionListDto {
    items: EditionListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        return new ListResultDtoOfEditionListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfEditionListDto(JSON.parse(json));
    }
}

export class EditionListDto {
    /** 版本(系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): EditionListDto {
        return new EditionListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionListDto(JSON.parse(json));
    }
}

export class GetEditionForEditOutput {
    /** 版本详情 */
    edition: EditionEditDto;
    /** 赋予的特性 */
    featureValues: NameValueDto[];
    /** 所有特性列表 */
    features: FlatFeatureDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionForEditOutput {
        return new GetEditionForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["edition"] = this.edition ? this.edition.toJS() : undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetEditionForEditOutput(JSON.parse(json));
    }
}

/** 版本信息编辑 DTO */
export class EditionEditDto {
    /** Id(可空) */
    id: number;
    /** 显示名称 */
    displayName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
        }
    }

    static fromJS(data: any): EditionEditDto {
        return new EditionEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionEditDto(JSON.parse(json));
    }
}

export class FlatFeatureDto {
    /** 父(特性)名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认值 */
    defaultValue: string;
    /** 输出框类型 */
    inputType: IInputType;

    constructor(data?: any) {
        if (data !== undefined) {
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.defaultValue = data["defaultValue"] !== undefined ? data["defaultValue"] : undefined;
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        return new FlatFeatureDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentName"] = this.parentName !== undefined ? this.parentName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["defaultValue"] = this.defaultValue !== undefined ? this.defaultValue : undefined;
        data["inputType"] = this.inputType ? this.inputType.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatFeatureDto(JSON.parse(json));
    }
}

export class IInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : undefined;
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : undefined;
        }
    }

    static fromJS(data: any): IInputType {
        return new IInputType(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : undefined;
            }
        }
        data["validator"] = this.validator ? this.validator.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IInputType(JSON.parse(json));
    }
}

export class IValueValidator {
    name: string;
    attributes: { [key: string] : any; };

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : undefined;
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        return new IValueValidator(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : undefined;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IValueValidator(JSON.parse(json));
    }
}

/** 创建或更新版本 DTO */
export class CreateOrUpdateEditionDto {
    /** 版本信息 */
    edition: EditionEditDto = new EditionEditDto();
    /** 功能信息 */
    featureValues: NameValueDto[] = [];

    constructor(data?: any) {
        if (data !== undefined) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        return new CreateOrUpdateEditionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["edition"] = this.edition ? this.edition.toJS() : undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateEditionDto(JSON.parse(json));
    }
}

/** 上传图片回调参数 */
export class UploadPictureInput {
    /** 空间名 */
    bucket: string;
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bucket = data["bucket"] !== undefined ? data["bucket"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.key = data["key"] !== undefined ? data["key"] : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.groupId = data["groupId"] !== undefined ? data["groupId"] : undefined;
        }
    }

    static fromJS(data: any): UploadPictureInput {
        return new UploadPictureInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bucket"] = this.bucket !== undefined ? this.bucket : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["key"] = this.key !== undefined ? this.key : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["groupId"] = this.groupId !== undefined ? this.groupId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UploadPictureInput(JSON.parse(json));
    }
}

export class UploadPictureOutput {
    pictureId: number;
    originalUrl: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
            this.originalUrl = data["originalUrl"] !== undefined ? data["originalUrl"] : undefined;
        }
    }

    static fromJS(data: any): UploadPictureOutput {
        return new UploadPictureOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        data["originalUrl"] = this.originalUrl !== undefined ? this.originalUrl : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UploadPictureOutput(JSON.parse(json));
    }
}

export class CreateFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        return new CreateFriendshipRequestInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateFriendshipRequestInput(JSON.parse(json));
    }
}

export class CreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        return new CreateFriendshipRequestByUserNameInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateFriendshipRequestByUserNameInput(JSON.parse(json));
    }
}

export class BlockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): BlockUserInput {
        return new BlockUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BlockUserInput(JSON.parse(json));
    }
}

export class UnblockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): UnblockUserInput {
        return new UnblockUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UnblockUserInput(JSON.parse(json));
    }
}

export class AcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        return new AcceptFriendshipRequestInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AcceptFriendshipRequestInput(JSON.parse(json));
    }
}

export class HostSettingsEditDto {
    /** 基本信息 */
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto();
    /** 用户管理 */
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto();
    /** 邮件 */
    email: EmailSettingsEditDto = new EmailSettingsEditDto();
    /** 租户设置 */
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto();
    /** 安全 */
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto = new ExternalAuthenticationEditDto();
    /** 短信设置 */
    smsSettings: SMSSettingsEditDto = new SMSSettingsEditDto();

    constructor(data?: any) {
        if (data !== undefined) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : new ExternalAuthenticationEditDto();
            this.smsSettings = data["smsSettings"] ? SMSSettingsEditDto.fromJS(data["smsSettings"]) : new SMSSettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        return new HostSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["general"] = this.general ? this.general.toJS() : undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJS() : undefined;
        data["email"] = this.email ? this.email.toJS() : undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJS() : undefined;
        data["security"] = this.security ? this.security.toJS() : undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJS() : undefined;
        data["smsSettings"] = this.smsSettings ? this.smsSettings.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HostSettingsEditDto(JSON.parse(json));
    }
}

export class GeneralSettingsEditDto {
    /** 时区 */
    timezone: string;
    /** 这个值只用于比较用户默认时区 */
    timezoneForComparison: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : undefined;
            this.timezoneForComparison = data["timezoneForComparison"] !== undefined ? data["timezoneForComparison"] : undefined;
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        return new GeneralSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["timezone"] = this.timezone !== undefined ? this.timezone : undefined;
        data["timezoneForComparison"] = this.timezoneForComparison !== undefined ? this.timezoneForComparison : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GeneralSettingsEditDto(JSON.parse(json));
    }
}

export class HostUserManagementSettingsEditDto {
    /** 必须验证邮箱地址后才能登录 */
    isEmailConfirmationRequiredForLogin: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"] !== undefined ? data["isEmailConfirmationRequiredForLogin"] : undefined;
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        return new HostUserManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin !== undefined ? this.isEmailConfirmationRequiredForLogin : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HostUserManagementSettingsEditDto(JSON.parse(json));
    }
}

export class EmailSettingsEditDto {
    /** 默认发送邮箱 */
    defaultFromAddress: string;
    /** 默认发件人名字 */
    defaultFromDisplayName: string;
    /** SMTP 服务器地址 */
    smtpHost: string;
    /** SMTP 端口 */
    smtpPort: number;
    /** SMTP 用户名 */
    smtpUserName: string;
    /** SMTP 密码 */
    smtpPassword: string;
    /** SMTP 域名 */
    smtpDomain: string;
    /** 使用SSL */
    smtpEnableSsl: boolean;
    /** 默认身份验证 */
    smtpUseDefaultCredentials: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.defaultFromAddress = data["defaultFromAddress"] !== undefined ? data["defaultFromAddress"] : undefined;
            this.defaultFromDisplayName = data["defaultFromDisplayName"] !== undefined ? data["defaultFromDisplayName"] : undefined;
            this.smtpHost = data["smtpHost"] !== undefined ? data["smtpHost"] : undefined;
            this.smtpPort = data["smtpPort"] !== undefined ? data["smtpPort"] : undefined;
            this.smtpUserName = data["smtpUserName"] !== undefined ? data["smtpUserName"] : undefined;
            this.smtpPassword = data["smtpPassword"] !== undefined ? data["smtpPassword"] : undefined;
            this.smtpDomain = data["smtpDomain"] !== undefined ? data["smtpDomain"] : undefined;
            this.smtpEnableSsl = data["smtpEnableSsl"] !== undefined ? data["smtpEnableSsl"] : undefined;
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"] !== undefined ? data["smtpUseDefaultCredentials"] : undefined;
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        return new EmailSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["defaultFromAddress"] = this.defaultFromAddress !== undefined ? this.defaultFromAddress : undefined;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName !== undefined ? this.defaultFromDisplayName : undefined;
        data["smtpHost"] = this.smtpHost !== undefined ? this.smtpHost : undefined;
        data["smtpPort"] = this.smtpPort !== undefined ? this.smtpPort : undefined;
        data["smtpUserName"] = this.smtpUserName !== undefined ? this.smtpUserName : undefined;
        data["smtpPassword"] = this.smtpPassword !== undefined ? this.smtpPassword : undefined;
        data["smtpDomain"] = this.smtpDomain !== undefined ? this.smtpDomain : undefined;
        data["smtpEnableSsl"] = this.smtpEnableSsl !== undefined ? this.smtpEnableSsl : undefined;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials !== undefined ? this.smtpUseDefaultCredentials : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EmailSettingsEditDto(JSON.parse(json));
    }
}

/** 租户管理设置 */
export class TenantManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration: boolean;
    /** 新注册 */
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.allowSelfRegistration = data["allowSelfRegistration"] !== undefined ? data["allowSelfRegistration"] : undefined;
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"] !== undefined ? data["isNewRegisteredTenantActiveByDefault"] : undefined;
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"] !== undefined ? data["useCaptchaOnRegistration"] : undefined;
            this.defaultEditionId = data["defaultEditionId"] !== undefined ? data["defaultEditionId"] : undefined;
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        return new TenantManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["allowSelfRegistration"] = this.allowSelfRegistration !== undefined ? this.allowSelfRegistration : undefined;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault !== undefined ? this.isNewRegisteredTenantActiveByDefault : undefined;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration !== undefined ? this.useCaptchaOnRegistration : undefined;
        data["defaultEditionId"] = this.defaultEditionId !== undefined ? this.defaultEditionId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantManagementSettingsEditDto(JSON.parse(json));
    }
}

export class SecuritySettingsEditDto {
    /** 使用默认设置 */
    useDefaultPasswordComplexitySettings: boolean;
    /** 密码复杂性 */
    passwordComplexity: PasswordComplexitySetting;
    /** 默认密码复杂性 */
    defaultPasswordComplexity: PasswordComplexitySetting;
    /** 用户锁定 */
    userLockOut: UserLockOutSettingsEditDto;
    /** 两步认证登录 */
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
    /** 验证码设置 */
    verificationCode: VerificationCodeSettingsEditDto;

    constructor(data?: any) {
        if (data !== undefined) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"] !== undefined ? data["useDefaultPasswordComplexitySettings"] : undefined;
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : undefined;
            this.verificationCode = data["verificationCode"] ? VerificationCodeSettingsEditDto.fromJS(data["verificationCode"]) : undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        return new SecuritySettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings !== undefined ? this.useDefaultPasswordComplexitySettings : undefined;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJS() : undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJS() : undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJS() : undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJS() : undefined;
        data["verificationCode"] = this.verificationCode ? this.verificationCode.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SecuritySettingsEditDto(JSON.parse(json));
    }
}

/** 第三方登陆配置 */
export class ExternalAuthenticationEditDto {
    /** 激活账号选项 Id Xiaoyuyue.Enums.UserActivationOption */
    userActivationId: number;
    /** 需要用户名 */
    requiredUserName: boolean;
    /** 需要邮箱 */
    requiredEmail: boolean;
    /** 需要手机 */
    requiredTelephone: boolean;
    /** 使用手机作为用户名 */
    useTelephoneforUsername: boolean;
    /** 第三方登陆供应商 */
    externalAuthenticationProviders: ExternalAuthenticationProviderEditDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.userActivationId = data["userActivationId"] !== undefined ? data["userActivationId"] : undefined;
            this.requiredUserName = data["requiredUserName"] !== undefined ? data["requiredUserName"] : undefined;
            this.requiredEmail = data["requiredEmail"] !== undefined ? data["requiredEmail"] : undefined;
            this.requiredTelephone = data["requiredTelephone"] !== undefined ? data["requiredTelephone"] : undefined;
            this.useTelephoneforUsername = data["useTelephoneforUsername"] !== undefined ? data["useTelephoneforUsername"] : undefined;
            if (data["externalAuthenticationProviders"] && data["externalAuthenticationProviders"].constructor === Array) {
                this.externalAuthenticationProviders = [];
                for (let item of data["externalAuthenticationProviders"])
                    this.externalAuthenticationProviders.push(ExternalAuthenticationProviderEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExternalAuthenticationEditDto {
        return new ExternalAuthenticationEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userActivationId"] = this.userActivationId !== undefined ? this.userActivationId : undefined;
        data["requiredUserName"] = this.requiredUserName !== undefined ? this.requiredUserName : undefined;
        data["requiredEmail"] = this.requiredEmail !== undefined ? this.requiredEmail : undefined;
        data["requiredTelephone"] = this.requiredTelephone !== undefined ? this.requiredTelephone : undefined;
        data["useTelephoneforUsername"] = this.useTelephoneforUsername !== undefined ? this.useTelephoneforUsername : undefined;
        if (this.externalAuthenticationProviders && this.externalAuthenticationProviders.constructor === Array) {
            data["externalAuthenticationProviders"] = [];
            for (let item of this.externalAuthenticationProviders)
                data["externalAuthenticationProviders"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticationEditDto(JSON.parse(json));
    }
}

export class SMSSettingsEditDto {
    /** 注册验证码模板 */
    registerVerificationTempId: number;
    /** 修改密码验证码模板 */
    changePasswordVerificationTempId: number;
    /** 修改手机验证码模板 */
    changeTelephoneVerificationTempId: number;
    /** 修改手机验证码模板 */
    loginVerificationTempId: number;
    /** 可用短信模板 */
    availableSmsTemplates: SelectListItemDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.registerVerificationTempId = data["registerVerificationTempId"] !== undefined ? data["registerVerificationTempId"] : undefined;
            this.changePasswordVerificationTempId = data["changePasswordVerificationTempId"] !== undefined ? data["changePasswordVerificationTempId"] : undefined;
            this.changeTelephoneVerificationTempId = data["changeTelephoneVerificationTempId"] !== undefined ? data["changeTelephoneVerificationTempId"] : undefined;
            this.loginVerificationTempId = data["loginVerificationTempId"] !== undefined ? data["loginVerificationTempId"] : undefined;
            if (data["availableSmsTemplates"] && data["availableSmsTemplates"].constructor === Array) {
                this.availableSmsTemplates = [];
                for (let item of data["availableSmsTemplates"])
                    this.availableSmsTemplates.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SMSSettingsEditDto {
        return new SMSSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["registerVerificationTempId"] = this.registerVerificationTempId !== undefined ? this.registerVerificationTempId : undefined;
        data["changePasswordVerificationTempId"] = this.changePasswordVerificationTempId !== undefined ? this.changePasswordVerificationTempId : undefined;
        data["changeTelephoneVerificationTempId"] = this.changeTelephoneVerificationTempId !== undefined ? this.changeTelephoneVerificationTempId : undefined;
        data["loginVerificationTempId"] = this.loginVerificationTempId !== undefined ? this.loginVerificationTempId : undefined;
        if (this.availableSmsTemplates && this.availableSmsTemplates.constructor === Array) {
            data["availableSmsTemplates"] = [];
            for (let item of this.availableSmsTemplates)
                data["availableSmsTemplates"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SMSSettingsEditDto(JSON.parse(json));
    }
}

export class PasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.requireDigit = data["requireDigit"] !== undefined ? data["requireDigit"] : undefined;
            this.requireLowercase = data["requireLowercase"] !== undefined ? data["requireLowercase"] : undefined;
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"] !== undefined ? data["requireNonAlphanumeric"] : undefined;
            this.requireUppercase = data["requireUppercase"] !== undefined ? data["requireUppercase"] : undefined;
            this.requiredLength = data["requiredLength"] !== undefined ? data["requiredLength"] : undefined;
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        return new PasswordComplexitySetting(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["requireDigit"] = this.requireDigit !== undefined ? this.requireDigit : undefined;
        data["requireLowercase"] = this.requireLowercase !== undefined ? this.requireLowercase : undefined;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric !== undefined ? this.requireNonAlphanumeric : undefined;
        data["requireUppercase"] = this.requireUppercase !== undefined ? this.requireUppercase : undefined;
        data["requiredLength"] = this.requiredLength !== undefined ? this.requiredLength : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PasswordComplexitySetting(JSON.parse(json));
    }
}

export class UserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"] !== undefined ? data["maxFailedAccessAttemptsBeforeLockout"] : undefined;
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"] !== undefined ? data["defaultAccountLockoutSeconds"] : undefined;
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        return new UserLockOutSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout !== undefined ? this.maxFailedAccessAttemptsBeforeLockout : undefined;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds !== undefined ? this.defaultAccountLockoutSeconds : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLockOutSettingsEditDto(JSON.parse(json));
    }
}

export class TwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabledForApplication = data["isEnabledForApplication"] !== undefined ? data["isEnabledForApplication"] : undefined;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"] !== undefined ? data["isEmailProviderEnabled"] : undefined;
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"] !== undefined ? data["isSmsProviderEnabled"] : undefined;
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"] !== undefined ? data["isRememberBrowserEnabled"] : undefined;
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        return new TwoFactorLoginSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabledForApplication"] = this.isEnabledForApplication !== undefined ? this.isEnabledForApplication : undefined;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled !== undefined ? this.isEmailProviderEnabled : undefined;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled !== undefined ? this.isSmsProviderEnabled : undefined;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled !== undefined ? this.isRememberBrowserEnabled : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TwoFactorLoginSettingsEditDto(JSON.parse(json));
    }
}

export class VerificationCodeSettingsEditDto {
    /** 启用验证码 */
    isEnabled: boolean;
    /** 有效秒数 */
    availableSecond: number;
    /** 验证码最小发送间隔 */
    minimumSendInterval: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.availableSecond = data["availableSecond"] !== undefined ? data["availableSecond"] : undefined;
            this.minimumSendInterval = data["minimumSendInterval"] !== undefined ? data["minimumSendInterval"] : undefined;
        }
    }

    static fromJS(data: any): VerificationCodeSettingsEditDto {
        return new VerificationCodeSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["availableSecond"] = this.availableSecond !== undefined ? this.availableSecond : undefined;
        data["minimumSendInterval"] = this.minimumSendInterval !== undefined ? this.minimumSendInterval : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new VerificationCodeSettingsEditDto(JSON.parse(json));
    }
}

export class ExternalAuthenticationProviderEditDto {
    /** 第三方登陆名称 */
    providerName: string;
    /** 启用 */
    isEnabled: boolean;
    /** App id */
    appId: string;
    /** App secret */
    appSecret: string;
    /** 在登录页面显示 */
    showOnLoginPage: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.providerName = data["providerName"] !== undefined ? data["providerName"] : undefined;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.appId = data["appId"] !== undefined ? data["appId"] : undefined;
            this.appSecret = data["appSecret"] !== undefined ? data["appSecret"] : undefined;
            this.showOnLoginPage = data["showOnLoginPage"] !== undefined ? data["showOnLoginPage"] : undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticationProviderEditDto {
        return new ExternalAuthenticationProviderEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["providerName"] = this.providerName !== undefined ? this.providerName : undefined;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["appId"] = this.appId !== undefined ? this.appId : undefined;
        data["appSecret"] = this.appSecret !== undefined ? this.appSecret : undefined;
        data["showOnLoginPage"] = this.showOnLoginPage !== undefined ? this.showOnLoginPage : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticationProviderEditDto(JSON.parse(json));
    }
}

export class SendTestEmailInput {
    /** 目标邮箱地址 */
    emailAddress: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        return new SendTestEmailInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendTestEmailInput(JSON.parse(json));
    }
}

export class GetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.defaultLanguageName = data["defaultLanguageName"] !== undefined ? data["defaultLanguageName"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        return new GetLanguagesOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["defaultLanguageName"] = this.defaultLanguageName !== undefined ? this.defaultLanguageName : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLanguagesOutput(JSON.parse(json));
    }
}

export class ApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.icon = data["icon"] !== undefined ? data["icon"] : undefined;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : undefined;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : undefined;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        return new ApplicationLanguageListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["icon"] = this.icon !== undefined ? this.icon : undefined;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : undefined;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : undefined;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationLanguageListDto(JSON.parse(json));
    }
}

export class GetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        return new GetLanguageForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["language"] = this.language ? this.language.toJS() : undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJS());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLanguageForEditOutput(JSON.parse(json));
    }
}

export class ApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.icon = data["icon"] !== undefined ? data["icon"] : undefined;
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        return new ApplicationLanguageEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["icon"] = this.icon !== undefined ? this.icon : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationLanguageEditDto(JSON.parse(json));
    }
}

export class CreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();

    constructor(data?: any) {
        if (data !== undefined) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        return new CreateOrUpdateLanguageInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["language"] = this.language ? this.language.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateLanguageInput(JSON.parse(json));
    }
}

export class SetDefaultLanguageInput {
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        return new SetDefaultLanguageInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetDefaultLanguageInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        return new PagedResultDtoOfLanguageTextListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfLanguageTextListDto(JSON.parse(json));
    }
}

export class LanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.key = data["key"] !== undefined ? data["key"] : undefined;
            this.baseValue = data["baseValue"] !== undefined ? data["baseValue"] : undefined;
            this.targetValue = data["targetValue"] !== undefined ? data["targetValue"] : undefined;
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        return new LanguageTextListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["key"] = this.key !== undefined ? this.key : undefined;
        data["baseValue"] = this.baseValue !== undefined ? this.baseValue : undefined;
        data["targetValue"] = this.targetValue !== undefined ? this.targetValue : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageTextListDto(JSON.parse(json));
    }
}

export class UpdateLanguageTextInput {
    /** 语言名称 */
    languageName: string;
    /** 源名称 */
    sourceName: string;
    /** 唯一标识符(Key) */
    key: string;
    /** 值 */
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : undefined;
            this.sourceName = data["sourceName"] !== undefined ? data["sourceName"] : undefined;
            this.key = data["key"] !== undefined ? data["key"] : undefined;
            this.value = data["value"] !== undefined ? data["value"] : undefined;
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        return new UpdateLanguageTextInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["languageName"] = this.languageName !== undefined ? this.languageName : undefined;
        data["sourceName"] = this.sourceName !== undefined ? this.sourceName : undefined;
        data["key"] = this.key !== undefined ? this.key : undefined;
        data["value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateLanguageTextInput(JSON.parse(json));
    }
}

export class TokensListDto {
    name: string;
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.value = data["value"] !== undefined ? data["value"] : undefined;
        }
    }

    static fromJS(data: any): TokensListDto {
        return new TokensListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TokensListDto(JSON.parse(json));
    }
}

export class GetNotificationsOutput {
    /** 唯独消息数量 */
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.unreadCount = data["unreadCount"] !== undefined ? data["unreadCount"] : undefined;
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        return new GetNotificationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["unreadCount"] = this.unreadCount !== undefined ? this.unreadCount : undefined;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetNotificationsOutput(JSON.parse(json));
    }
}

export class UserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.state = data["state"] !== undefined ? data["state"] : undefined;
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): UserNotification {
        return new UserNotification(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["state"] = this.state !== undefined ? this.state : undefined;
        data["notification"] = this.notification ? this.notification.toJS() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserNotification(JSON.parse(json));
    }
}

export class TenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.notificationName = data["notificationName"] !== undefined ? data["notificationName"] : undefined;
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : undefined;
            this.entityType = data["entityType"] !== undefined ? data["entityType"] : undefined;
            this.entityTypeName = data["entityTypeName"] !== undefined ? data["entityTypeName"] : undefined;
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key] !== undefined ? data["entityId"][key] : undefined;
                }
            }
            this.severity = data["severity"] !== undefined ? data["severity"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantNotification {
        return new TenantNotification(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["notificationName"] = this.notificationName !== undefined ? this.notificationName : undefined;
        data["data"] = this.data ? this.data.toJS() : undefined;
        data["entityType"] = this.entityType !== undefined ? this.entityType : undefined;
        data["entityTypeName"] = this.entityTypeName !== undefined ? this.entityTypeName : undefined;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key] !== undefined ? this.entityId[key] : undefined;
            }
        }
        data["severity"] = this.severity !== undefined ? this.severity : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantNotification(JSON.parse(json));
    }
}

export class NotificationData {
    type: string;
    properties: { [key: string] : any; };

    constructor(data?: any) {
        if (data !== undefined) {
            this.type = data["type"] !== undefined ? data["type"] : undefined;
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key] !== undefined ? data["properties"][key] : undefined;
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        return new NotificationData(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["type"] = this.type !== undefined ? this.type : undefined;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key] !== undefined ? this.properties[key] : undefined;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationData(JSON.parse(json));
    }
}

export class EntityDtoOfGuid {
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        return new EntityDtoOfGuid(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfGuid(JSON.parse(json));
    }
}

export class GetNotificationSettingsOutput {
    /** 是否订阅 */
    receiveNotifications: boolean;
    /** 订阅消息 */
    notifications: NotificationSubscriptionWithDisplayNameDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.receiveNotifications = data["receiveNotifications"] !== undefined ? data["receiveNotifications"] : undefined;
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        return new GetNotificationSettingsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["receiveNotifications"] = this.receiveNotifications !== undefined ? this.receiveNotifications : undefined;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetNotificationSettingsOutput(JSON.parse(json));
    }
}

export class NotificationSubscriptionWithDisplayNameDto {
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.isSubscribed = data["isSubscribed"] !== undefined ? data["isSubscribed"] : undefined;
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        return new NotificationSubscriptionWithDisplayNameDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["isSubscribed"] = this.isSubscribed !== undefined ? this.isSubscribed : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationSubscriptionWithDisplayNameDto(JSON.parse(json));
    }
}

export class UpdateNotificationSettingsInput {
    /** 是否接受通知 */
    receiveNotifications: boolean;
    /** 通知订阅 */
    notifications: NotificationSubscriptionDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.receiveNotifications = data["receiveNotifications"] !== undefined ? data["receiveNotifications"] : undefined;
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        return new UpdateNotificationSettingsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["receiveNotifications"] = this.receiveNotifications !== undefined ? this.receiveNotifications : undefined;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateNotificationSettingsInput(JSON.parse(json));
    }
}

/** 消息订阅 */
export class NotificationSubscriptionDto {
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.isSubscribed = data["isSubscribed"] !== undefined ? data["isSubscribed"] : undefined;
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        return new NotificationSubscriptionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["isSubscribed"] = this.isSubscribed !== undefined ? this.isSubscribed : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationSubscriptionDto(JSON.parse(json));
    }
}

export class ListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        return new ListResultDtoOfOrganizationUnitDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfOrganizationUnitDto(JSON.parse(json));
    }
}

export class OrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : undefined;
            this.code = data["code"] !== undefined ? data["code"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.memberCount = data["memberCount"] !== undefined ? data["memberCount"] : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        return new OrganizationUnitDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : undefined;
        data["code"] = this.code !== undefined ? this.code : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["memberCount"] = this.memberCount !== undefined ? this.memberCount : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        return new PagedResultDtoOfOrganizationUnitUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfOrganizationUnitUserListDto(JSON.parse(json));
    }
}

export class OrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: number;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : undefined;
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        return new OrganizationUnitUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : undefined;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitUserListDto(JSON.parse(json));
    }
}

export class CreateOrganizationUnitInput {
    /** 父节点Id(可空) */
    parentId: number;
    /** 显示名称 */
    displayName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        return new CreateOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrganizationUnitInput(JSON.parse(json));
    }
}

export class UpdateOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 显示名称 */
    displayName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        return new UpdateOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateOrganizationUnitInput(JSON.parse(json));
    }
}

export class MoveOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 目标父节点Id(可空) */
    newParentId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.newParentId = data["newParentId"] !== undefined ? data["newParentId"] : undefined;
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        return new MoveOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["newParentId"] = this.newParentId !== undefined ? this.newParentId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MoveOrganizationUnitInput(JSON.parse(json));
    }
}

export class UserToOrganizationUnitInput {
    /** 用户 Id(大于0) */
    userId: number;
    /** 组织单位 Id(大于0) */
    organizationUnitId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.organizationUnitId = data["organizationUnitId"] !== undefined ? data["organizationUnitId"] : undefined;
        }
    }

    static fromJS(data: any): UserToOrganizationUnitInput {
        return new UserToOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserToOrganizationUnitInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfBookingListDto {
    totalCount: number;
    items: BookingListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBookingListDto {
        return new PagedResultDtoOfBookingListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfBookingListDto(JSON.parse(json));
    }
}

/** 预约列表 */
export class BookingListDto {
    /** 预约名称 */
    name: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 门店 */
    outlet: string;
    /** 门店 */
    outletAddress: string;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
    /** 查看次数 */
    pv: number;
    /** 查看人次 */
    uv: number;
    /** 最大可预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    /** 待确认人数 */
    wait4ConfirmNum: number;
    /** 可用预约时间 */
    availableBookingTime: string[];
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.contactor = data["contactor"] !== undefined ? data["contactor"] : undefined;
            this.contactorPhoneNum = data["contactorPhoneNum"] !== undefined ? data["contactorPhoneNum"] : undefined;
            this.outlet = data["outlet"] !== undefined ? data["outlet"] : undefined;
            this.outletAddress = data["outletAddress"] !== undefined ? data["outletAddress"] : undefined;
            this.sticked = data["sticked"] !== undefined ? data["sticked"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.pv = data["pv"] !== undefined ? data["pv"] : undefined;
            this.uv = data["uv"] !== undefined ? data["uv"] : undefined;
            this.subMaxBookingNum = data["subMaxBookingNum"] !== undefined ? data["subMaxBookingNum"] : undefined;
            this.subQueueNum = data["subQueueNum"] !== undefined ? data["subQueueNum"] : undefined;
            this.subBookedNum = data["subBookedNum"] !== undefined ? data["subBookedNum"] : undefined;
            this.wait4ConfirmNum = data["wait4ConfirmNum"] !== undefined ? data["wait4ConfirmNum"] : undefined;
            if (data["availableBookingTime"] && data["availableBookingTime"].constructor === Array) {
                this.availableBookingTime = [];
                for (let item of data["availableBookingTime"])
                    this.availableBookingTime.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingListDto {
        return new BookingListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["contactor"] = this.contactor !== undefined ? this.contactor : undefined;
        data["contactorPhoneNum"] = this.contactorPhoneNum !== undefined ? this.contactorPhoneNum : undefined;
        data["outlet"] = this.outlet !== undefined ? this.outlet : undefined;
        data["outletAddress"] = this.outletAddress !== undefined ? this.outletAddress : undefined;
        data["sticked"] = this.sticked !== undefined ? this.sticked : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["pv"] = this.pv !== undefined ? this.pv : undefined;
        data["uv"] = this.uv !== undefined ? this.uv : undefined;
        data["subMaxBookingNum"] = this.subMaxBookingNum !== undefined ? this.subMaxBookingNum : undefined;
        data["subQueueNum"] = this.subQueueNum !== undefined ? this.subQueueNum : undefined;
        data["subBookedNum"] = this.subBookedNum !== undefined ? this.subBookedNum : undefined;
        data["wait4ConfirmNum"] = this.wait4ConfirmNum !== undefined ? this.wait4ConfirmNum : undefined;
        if (this.availableBookingTime && this.availableBookingTime.constructor === Array) {
            data["availableBookingTime"] = [];
            for (let item of this.availableBookingTime)
                data["availableBookingTime"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingListDto(JSON.parse(json));
    }
}

export class GetBookingForEditOutput {
    /** 预约基本信息 */
    booking: BookingEditDto;
    /** 时间段 */
    items: BookingItemEditDto[];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[];
    /** 可用门店列表 */
    availableOutlets: SelectListItemDto[];
    /** 可用联系人列表（默认门店下的可用联系人） */
    availableContactors: SelectListItemDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.booking = data["booking"] ? BookingEditDto.fromJS(data["booking"]) : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItemEditDto.fromJS(item));
            }
            if (data["bookingPictures"] && data["bookingPictures"].constructor === Array) {
                this.bookingPictures = [];
                for (let item of data["bookingPictures"])
                    this.bookingPictures.push(BookingPictureEditDto.fromJS(item));
            }
            if (data["availableOutlets"] && data["availableOutlets"].constructor === Array) {
                this.availableOutlets = [];
                for (let item of data["availableOutlets"])
                    this.availableOutlets.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableContactors"] && data["availableContactors"].constructor === Array) {
                this.availableContactors = [];
                for (let item of data["availableContactors"])
                    this.availableContactors.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingForEditOutput {
        return new GetBookingForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["booking"] = this.booking ? this.booking.toJS() : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        if (this.bookingPictures && this.bookingPictures.constructor === Array) {
            data["bookingPictures"] = [];
            for (let item of this.bookingPictures)
                data["bookingPictures"].push(item.toJS());
        }
        if (this.availableOutlets && this.availableOutlets.constructor === Array) {
            data["availableOutlets"] = [];
            for (let item of this.availableOutlets)
                data["availableOutlets"].push(item.toJS());
        }
        if (this.availableContactors && this.availableContactors.constructor === Array) {
            data["availableContactors"] = [];
            for (let item of this.availableContactors)
                data["availableContactors"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetBookingForEditOutput(JSON.parse(json));
    }
}

export class BookingEditDto {
    /** Id，空时为创建预约 */
    id: number;
    /** 预约名称 */
    name: string;
    /** 预约简介 */
    description: string;
    /** 模板Id */
    templateId: number;
    /** 联系人Id(必填) */
    contactorId: number;
    /** 门店Id(必填) */
    outletId: number;
    /** 需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : undefined;
            this.contactorId = data["contactorId"] !== undefined ? data["contactorId"] : undefined;
            this.outletId = data["outletId"] !== undefined ? data["outletId"] : undefined;
            this.needGender = data["needGender"] !== undefined ? data["needGender"] : undefined;
            this.needAge = data["needAge"] !== undefined ? data["needAge"] : undefined;
            this.needEmail = data["needEmail"] !== undefined ? data["needEmail"] : undefined;
            this.sticked = data["sticked"] !== undefined ? data["sticked"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
        }
    }

    static fromJS(data: any): BookingEditDto {
        return new BookingEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["templateId"] = this.templateId !== undefined ? this.templateId : undefined;
        data["contactorId"] = this.contactorId !== undefined ? this.contactorId : undefined;
        data["outletId"] = this.outletId !== undefined ? this.outletId : undefined;
        data["needGender"] = this.needGender !== undefined ? this.needGender : undefined;
        data["needAge"] = this.needAge !== undefined ? this.needAge : undefined;
        data["needEmail"] = this.needEmail !== undefined ? this.needEmail : undefined;
        data["sticked"] = this.sticked !== undefined ? this.sticked : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingEditDto(JSON.parse(json));
    }
}

export class BookingItemEditDto {
    /** 预约 */
    bookingId: number;
    /** 可用日期(多个日期，使用","区分) */
    availableDates: string;
    /** 时间 */
    hourOfDay: string;
    /** 最大预约人数 */
    maxBookingNum: number;
    /** 最大排队人数 */
    maxQueueNum: number;
    /** 是否激活 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bookingId = data["bookingId"] !== undefined ? data["bookingId"] : undefined;
            this.availableDates = data["availableDates"] !== undefined ? data["availableDates"] : undefined;
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
            this.maxBookingNum = data["maxBookingNum"] !== undefined ? data["maxBookingNum"] : undefined;
            this.maxQueueNum = data["maxQueueNum"] !== undefined ? data["maxQueueNum"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingItemEditDto {
        return new BookingItemEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : undefined;
        data["availableDates"] = this.availableDates !== undefined ? this.availableDates : undefined;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        data["maxBookingNum"] = this.maxBookingNum !== undefined ? this.maxBookingNum : undefined;
        data["maxQueueNum"] = this.maxQueueNum !== undefined ? this.maxQueueNum : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingItemEditDto(JSON.parse(json));
    }
}

export class BookingPictureEditDto {
    /** 图片Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 排序 */
    displayOrder: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
            this.pictureUrl = data["pictureUrl"] !== undefined ? data["pictureUrl"] : undefined;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingPictureEditDto {
        return new BookingPictureEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : undefined;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingPictureEditDto(JSON.parse(json));
    }
}

export class CreateOrUpdateBookingInput {
    /** 预约基本信息 */
    booking: BookingEditDto = new BookingEditDto();
    /** 时间段 */
    items: BookingItemEditDto[] = [];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[] = [];

    constructor(data?: any) {
        if (data !== undefined) {
            this.booking = data["booking"] ? BookingEditDto.fromJS(data["booking"]) : new BookingEditDto();
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItemEditDto.fromJS(item));
            }
            if (data["bookingPictures"] && data["bookingPictures"].constructor === Array) {
                this.bookingPictures = [];
                for (let item of data["bookingPictures"])
                    this.bookingPictures.push(BookingPictureEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateBookingInput {
        return new CreateOrUpdateBookingInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["booking"] = this.booking ? this.booking.toJS() : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        if (this.bookingPictures && this.bookingPictures.constructor === Array) {
            data["bookingPictures"] = [];
            for (let item of this.bookingPictures)
                data["bookingPictures"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateBookingInput(JSON.parse(json));
    }
}

export class ActiveOrDisableInput {
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): ActiveOrDisableInput {
        return new ActiveOrDisableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActiveOrDisableInput(JSON.parse(json));
    }
}

export class Contactor {
    name: string;
    phoneNumber: string;
    wechatQrcodeUrl: string;
    tenantId: number;
    outletId: number;
    isDefault: boolean;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.wechatQrcodeUrl = data["wechatQrcodeUrl"] !== undefined ? data["wechatQrcodeUrl"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.outletId = data["outletId"] !== undefined ? data["outletId"] : undefined;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): Contactor {
        return new Contactor(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["wechatQrcodeUrl"] = this.wechatQrcodeUrl !== undefined ? this.wechatQrcodeUrl : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["outletId"] = this.outletId !== undefined ? this.outletId : undefined;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Contactor(JSON.parse(json));
    }
}

export class BookingItem {
    tenantId: number;
    bookingId: number;
    availableDates: string;
    hourOfDay: string;
    maxBookingNum: number;
    maxQueueNum: number;
    bookedNum: number;
    queueNum: number;
    isActive: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    booking: Booking;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.bookingId = data["bookingId"] !== undefined ? data["bookingId"] : undefined;
            this.availableDates = data["availableDates"] !== undefined ? data["availableDates"] : undefined;
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
            this.maxBookingNum = data["maxBookingNum"] !== undefined ? data["maxBookingNum"] : undefined;
            this.maxQueueNum = data["maxQueueNum"] !== undefined ? data["maxQueueNum"] : undefined;
            this.bookedNum = data["bookedNum"] !== undefined ? data["bookedNum"] : undefined;
            this.queueNum = data["queueNum"] !== undefined ? data["queueNum"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : undefined;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : undefined;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.booking = data["booking"] ? Booking.fromJS(data["booking"]) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingItem {
        return new BookingItem(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : undefined;
        data["availableDates"] = this.availableDates !== undefined ? this.availableDates : undefined;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        data["maxBookingNum"] = this.maxBookingNum !== undefined ? this.maxBookingNum : undefined;
        data["maxQueueNum"] = this.maxQueueNum !== undefined ? this.maxQueueNum : undefined;
        data["bookedNum"] = this.bookedNum !== undefined ? this.bookedNum : undefined;
        data["queueNum"] = this.queueNum !== undefined ? this.queueNum : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : undefined;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : undefined;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["booking"] = this.booking ? this.booking.toJS() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingItem(JSON.parse(json));
    }
}

export class Booking {
    tenantId: number;
    name: string;
    description: string;
    hint: string;
    templateId: number;
    contactorId: number;
    contactor: Contactor;
    outletId: number;
    outlet: Outlet;
    needGender: boolean;
    needAge: boolean;
    needEmail: boolean;
    sticked: boolean;
    isActive: boolean;
    pv: number;
    uv: number;
    items: BookingItem[];
    pictures: BookingPicture[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.hint = data["hint"] !== undefined ? data["hint"] : undefined;
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : undefined;
            this.contactorId = data["contactorId"] !== undefined ? data["contactorId"] : undefined;
            this.contactor = data["contactor"] ? Contactor.fromJS(data["contactor"]) : undefined;
            this.outletId = data["outletId"] !== undefined ? data["outletId"] : undefined;
            this.outlet = data["outlet"] ? Outlet.fromJS(data["outlet"]) : undefined;
            this.needGender = data["needGender"] !== undefined ? data["needGender"] : undefined;
            this.needAge = data["needAge"] !== undefined ? data["needAge"] : undefined;
            this.needEmail = data["needEmail"] !== undefined ? data["needEmail"] : undefined;
            this.sticked = data["sticked"] !== undefined ? data["sticked"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.pv = data["pv"] !== undefined ? data["pv"] : undefined;
            this.uv = data["uv"] !== undefined ? data["uv"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItem.fromJS(item));
            }
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(BookingPicture.fromJS(item));
            }
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : undefined;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : undefined;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): Booking {
        return new Booking(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["hint"] = this.hint !== undefined ? this.hint : undefined;
        data["templateId"] = this.templateId !== undefined ? this.templateId : undefined;
        data["contactorId"] = this.contactorId !== undefined ? this.contactorId : undefined;
        data["contactor"] = this.contactor ? this.contactor.toJS() : undefined;
        data["outletId"] = this.outletId !== undefined ? this.outletId : undefined;
        data["outlet"] = this.outlet ? this.outlet.toJS() : undefined;
        data["needGender"] = this.needGender !== undefined ? this.needGender : undefined;
        data["needAge"] = this.needAge !== undefined ? this.needAge : undefined;
        data["needEmail"] = this.needEmail !== undefined ? this.needEmail : undefined;
        data["sticked"] = this.sticked !== undefined ? this.sticked : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["pv"] = this.pv !== undefined ? this.pv : undefined;
        data["uv"] = this.uv !== undefined ? this.uv : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJS());
        }
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : undefined;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : undefined;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Booking(JSON.parse(json));
    }
}

export class Outlet {
    tenantId: number;
    name: string;
    longitude: string;
    phoneNum: string;
    businessHours: string;
    province: string;
    provinceId: number;
    city: string;
    cityId: number;
    district: string;
    districtId: number;
    detailAddress: string;
    pictureId: number;
    isActive: boolean;
    contactors: Contactor[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.longitude = data["longitude"] !== undefined ? data["longitude"] : undefined;
            this.phoneNum = data["phoneNum"] !== undefined ? data["phoneNum"] : undefined;
            this.businessHours = data["businessHours"] !== undefined ? data["businessHours"] : undefined;
            this.province = data["province"] !== undefined ? data["province"] : undefined;
            this.provinceId = data["provinceId"] !== undefined ? data["provinceId"] : undefined;
            this.city = data["city"] !== undefined ? data["city"] : undefined;
            this.cityId = data["cityId"] !== undefined ? data["cityId"] : undefined;
            this.district = data["district"] !== undefined ? data["district"] : undefined;
            this.districtId = data["districtId"] !== undefined ? data["districtId"] : undefined;
            this.detailAddress = data["detailAddress"] !== undefined ? data["detailAddress"] : undefined;
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(Contactor.fromJS(item));
            }
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : undefined;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : undefined;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): Outlet {
        return new Outlet(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["phoneNum"] = this.phoneNum !== undefined ? this.phoneNum : undefined;
        data["businessHours"] = this.businessHours !== undefined ? this.businessHours : undefined;
        data["province"] = this.province !== undefined ? this.province : undefined;
        data["provinceId"] = this.provinceId !== undefined ? this.provinceId : undefined;
        data["city"] = this.city !== undefined ? this.city : undefined;
        data["cityId"] = this.cityId !== undefined ? this.cityId : undefined;
        data["district"] = this.district !== undefined ? this.district : undefined;
        data["districtId"] = this.districtId !== undefined ? this.districtId : undefined;
        data["detailAddress"] = this.detailAddress !== undefined ? this.detailAddress : undefined;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJS());
        }
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : undefined;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : undefined;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Outlet(JSON.parse(json));
    }
}

export class BookingPicture {
    tenantId: number;
    bookingId: number;
    pictureId: number;
    displayOrder: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.bookingId = data["bookingId"] !== undefined ? data["bookingId"] : undefined;
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingPicture {
        return new BookingPicture(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : undefined;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingPicture(JSON.parse(json));
    }
}

export class PagedResultDtoOfBookingOrderListDto {
    totalCount: number;
    items: BookingOrderListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBookingOrderListDto {
        return new PagedResultDtoOfBookingOrderListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfBookingOrderListDto(JSON.parse(json));
    }
}

/** 预约列表 */
export class BookingOrderListDto {
    /** 应约人名称 */
    customerName: string;
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: moment.Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: BookingOrderListDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 备注 */
    remark: string;
    /** 置顶 */
    sticked: boolean;
    /** 邮箱 */
    emailAddress: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.customerName = data["customerName"] !== undefined ? data["customerName"] : undefined;
            this.bookingName = data["bookingName"] !== undefined ? data["bookingName"] : undefined;
            this.outletName = data["outletName"] !== undefined ? data["outletName"] : undefined;
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : undefined;
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
            this.subscriberNum = data["subscriberNum"] !== undefined ? data["subscriberNum"] : undefined;
            this.status = data["status"] !== undefined ? data["status"] : undefined;
            this.phoneNum = data["phoneNum"] !== undefined ? data["phoneNum"] : undefined;
            this.remark = data["remark"] !== undefined ? data["remark"] : undefined;
            this.sticked = data["sticked"] !== undefined ? data["sticked"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingOrderListDto {
        return new BookingOrderListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["customerName"] = this.customerName !== undefined ? this.customerName : undefined;
        data["bookingName"] = this.bookingName !== undefined ? this.bookingName : undefined;
        data["outletName"] = this.outletName !== undefined ? this.outletName : undefined;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : undefined;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        data["subscriberNum"] = this.subscriberNum !== undefined ? this.subscriberNum : undefined;
        data["status"] = this.status !== undefined ? this.status : undefined;
        data["phoneNum"] = this.phoneNum !== undefined ? this.phoneNum : undefined;
        data["remark"] = this.remark !== undefined ? this.remark : undefined;
        data["sticked"] = this.sticked !== undefined ? this.sticked : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingOrderListDto(JSON.parse(json));
    }
}

export class BookingsOrderListDto {
    totalBookingNum: number;
    bookingOrders: PagedResultDtoOfBookingOrderListDto;

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalBookingNum = data["totalBookingNum"] !== undefined ? data["totalBookingNum"] : undefined;
            this.bookingOrders = data["bookingOrders"] ? PagedResultDtoOfBookingOrderListDto.fromJS(data["bookingOrders"]) : undefined;
        }
    }

    static fromJS(data: any): BookingsOrderListDto {
        return new BookingsOrderListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalBookingNum"] = this.totalBookingNum !== undefined ? this.totalBookingNum : undefined;
        data["bookingOrders"] = this.bookingOrders ? this.bookingOrders.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingsOrderListDto(JSON.parse(json));
    }
}

export class BatchComfirmInput {
    /** 预约订单id数组 */
    ids: number[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [];
                for (let item of data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): BatchComfirmInput {
        return new BatchComfirmInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BatchComfirmInput(JSON.parse(json));
    }
}

export class EntityDtoOfInt64 {
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        return new EntityDtoOfInt64(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfInt64(JSON.parse(json));
    }
}

export class RemarkBookingOrderInput {
    /** 备注 */
    remark: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.remark = data["remark"] !== undefined ? data["remark"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): RemarkBookingOrderInput {
        return new RemarkBookingOrderInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["remark"] = this.remark !== undefined ? this.remark : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RemarkBookingOrderInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfOutletListDto {
    totalCount: number;
    items: OutletListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OutletListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutletListDto {
        return new PagedResultDtoOfOutletListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfOutletListDto(JSON.parse(json));
    }
}

export class OutletListDto {
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 省份 */
    province: string;
    /** 城市 */
    city: string;
    /** 区域 */
    district: string;
    /** 详细地址 */
    detailAddress: string;
    /** 图片url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;
    /** 联系人 */
    contactor: ContactorEditDto;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.longitude = data["longitude"] !== undefined ? data["longitude"] : undefined;
            this.businessHours = data["businessHours"] !== undefined ? data["businessHours"] : undefined;
            this.province = data["province"] !== undefined ? data["province"] : undefined;
            this.city = data["city"] !== undefined ? data["city"] : undefined;
            this.district = data["district"] !== undefined ? data["district"] : undefined;
            this.detailAddress = data["detailAddress"] !== undefined ? data["detailAddress"] : undefined;
            this.pictureUrl = data["pictureUrl"] !== undefined ? data["pictureUrl"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.contactor = data["contactor"] ? ContactorEditDto.fromJS(data["contactor"]) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): OutletListDto {
        return new OutletListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["businessHours"] = this.businessHours !== undefined ? this.businessHours : undefined;
        data["province"] = this.province !== undefined ? this.province : undefined;
        data["city"] = this.city !== undefined ? this.city : undefined;
        data["district"] = this.district !== undefined ? this.district : undefined;
        data["detailAddress"] = this.detailAddress !== undefined ? this.detailAddress : undefined;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["contactor"] = this.contactor ? this.contactor.toJS() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OutletListDto(JSON.parse(json));
    }
}

export class ContactorEditDto {
    /** 联系人Id，null时为创建,有值时为更新 */
    id: number;
    /** 姓名 */
    name: string;
    /** 电话号码 */
    phoneNum: string;
    /** 联系人二维码 */
    wechatQrcodeUrl: string;
    /** 门店Id */
    outletId: number;
    /** 是否默认 */
    isDefault: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.phoneNum = data["phoneNum"] !== undefined ? data["phoneNum"] : undefined;
            this.wechatQrcodeUrl = data["wechatQrcodeUrl"] !== undefined ? data["wechatQrcodeUrl"] : undefined;
            this.outletId = data["outletId"] !== undefined ? data["outletId"] : undefined;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : undefined;
        }
    }

    static fromJS(data: any): ContactorEditDto {
        return new ContactorEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["phoneNum"] = this.phoneNum !== undefined ? this.phoneNum : undefined;
        data["wechatQrcodeUrl"] = this.wechatQrcodeUrl !== undefined ? this.wechatQrcodeUrl : undefined;
        data["outletId"] = this.outletId !== undefined ? this.outletId : undefined;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ContactorEditDto(JSON.parse(json));
    }
}

export class GetOutletForEditDto {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];
    /** 可用省份 */
    availableProvinces: SelectListItemDto[];
    /** 可用城市 */
    availableCitys: SelectListItemDto[];
    /** 可用区域 */
    availableDistricts: SelectListItemDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.outlet = data["outlet"] ? OutletEditDto.fromJS(data["outlet"]) : undefined;
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(ContactorEditDto.fromJS(item));
            }
            if (data["availableProvinces"] && data["availableProvinces"].constructor === Array) {
                this.availableProvinces = [];
                for (let item of data["availableProvinces"])
                    this.availableProvinces.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableCitys"] && data["availableCitys"].constructor === Array) {
                this.availableCitys = [];
                for (let item of data["availableCitys"])
                    this.availableCitys.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableDistricts"] && data["availableDistricts"].constructor === Array) {
                this.availableDistricts = [];
                for (let item of data["availableDistricts"])
                    this.availableDistricts.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetOutletForEditDto {
        return new GetOutletForEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["outlet"] = this.outlet ? this.outlet.toJS() : undefined;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJS());
        }
        if (this.availableProvinces && this.availableProvinces.constructor === Array) {
            data["availableProvinces"] = [];
            for (let item of this.availableProvinces)
                data["availableProvinces"].push(item.toJS());
        }
        if (this.availableCitys && this.availableCitys.constructor === Array) {
            data["availableCitys"] = [];
            for (let item of this.availableCitys)
                data["availableCitys"].push(item.toJS());
        }
        if (this.availableDistricts && this.availableDistricts.constructor === Array) {
            data["availableDistricts"] = [];
            for (let item of this.availableDistricts)
                data["availableDistricts"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetOutletForEditDto(JSON.parse(json));
    }
}

export class OutletEditDto {
    /** 门店Id，null时为创建,有值时为更新 */
    id: number;
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 电话号码 */
    phoneNum: string;
    /** 省份(必填) */
    provinceId: number;
    /** 城市(必填) */
    cityId: number;
    /** 区域(可选,不填传0) */
    districtId: number;
    /** 详细地址 */
    detailAddress: string;
    /** 图片 Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.longitude = data["longitude"] !== undefined ? data["longitude"] : undefined;
            this.businessHours = data["businessHours"] !== undefined ? data["businessHours"] : undefined;
            this.phoneNum = data["phoneNum"] !== undefined ? data["phoneNum"] : undefined;
            this.provinceId = data["provinceId"] !== undefined ? data["provinceId"] : undefined;
            this.cityId = data["cityId"] !== undefined ? data["cityId"] : undefined;
            this.districtId = data["districtId"] !== undefined ? data["districtId"] : undefined;
            this.detailAddress = data["detailAddress"] !== undefined ? data["detailAddress"] : undefined;
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
            this.pictureUrl = data["pictureUrl"] !== undefined ? data["pictureUrl"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
        }
    }

    static fromJS(data: any): OutletEditDto {
        return new OutletEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["businessHours"] = this.businessHours !== undefined ? this.businessHours : undefined;
        data["phoneNum"] = this.phoneNum !== undefined ? this.phoneNum : undefined;
        data["provinceId"] = this.provinceId !== undefined ? this.provinceId : undefined;
        data["cityId"] = this.cityId !== undefined ? this.cityId : undefined;
        data["districtId"] = this.districtId !== undefined ? this.districtId : undefined;
        data["detailAddress"] = this.detailAddress !== undefined ? this.detailAddress : undefined;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OutletEditDto(JSON.parse(json));
    }
}

export class CreateOrUpdateOutletInput {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.outlet = data["outlet"] ? OutletEditDto.fromJS(data["outlet"]) : undefined;
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(ContactorEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateOutletInput {
        return new CreateOrUpdateOutletInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["outlet"] = this.outlet ? this.outlet.toJS() : undefined;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateOutletInput(JSON.parse(json));
    }
}

export class GetPersonBookingOrderOutput {
    /** 预约信息 */
    bookingInfo: BookingInfoDto;
    /** 预约订单信息 */
    orderInfo: BookingOrderInfo;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bookingInfo = data["bookingInfo"] ? BookingInfoDto.fromJS(data["bookingInfo"]) : undefined;
            this.orderInfo = data["orderInfo"] ? BookingOrderInfo.fromJS(data["orderInfo"]) : undefined;
        }
    }

    static fromJS(data: any): GetPersonBookingOrderOutput {
        return new GetPersonBookingOrderOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bookingInfo"] = this.bookingInfo ? this.bookingInfo.toJS() : undefined;
        data["orderInfo"] = this.orderInfo ? this.orderInfo.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetPersonBookingOrderOutput(JSON.parse(json));
    }
}

export class BookingInfoDto {
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 机构名称 */
    tenantName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人二维码 */
    contactorQrcode: string;
    /** 门店图片 */
    outletPictureUrl: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bookingName = data["bookingName"] !== undefined ? data["bookingName"] : undefined;
            this.outletName = data["outletName"] !== undefined ? data["outletName"] : undefined;
            this.tenantName = data["tenantName"] !== undefined ? data["tenantName"] : undefined;
            this.outletAddress = data["outletAddress"] !== undefined ? data["outletAddress"] : undefined;
            this.contactor = data["contactor"] !== undefined ? data["contactor"] : undefined;
            this.contactorPhoneNum = data["contactorPhoneNum"] !== undefined ? data["contactorPhoneNum"] : undefined;
            this.contactorQrcode = data["contactorQrcode"] !== undefined ? data["contactorQrcode"] : undefined;
            this.outletPictureUrl = data["outletPictureUrl"] !== undefined ? data["outletPictureUrl"] : undefined;
        }
    }

    static fromJS(data: any): BookingInfoDto {
        return new BookingInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bookingName"] = this.bookingName !== undefined ? this.bookingName : undefined;
        data["outletName"] = this.outletName !== undefined ? this.outletName : undefined;
        data["tenantName"] = this.tenantName !== undefined ? this.tenantName : undefined;
        data["outletAddress"] = this.outletAddress !== undefined ? this.outletAddress : undefined;
        data["contactor"] = this.contactor !== undefined ? this.contactor : undefined;
        data["contactorPhoneNum"] = this.contactorPhoneNum !== undefined ? this.contactorPhoneNum : undefined;
        data["contactorQrcode"] = this.contactorQrcode !== undefined ? this.contactorQrcode : undefined;
        data["outletPictureUrl"] = this.outletPictureUrl !== undefined ? this.outletPictureUrl : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingInfoDto(JSON.parse(json));
    }
}

/** 预约订单详情 */
export class BookingOrderInfo {
    /** 预约日期 */
    bookingData: moment.Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    bookingNum: number;
    /** 温馨提示 */
    hint: string;
    /** 客户名称 */
    customerName: string;
    /** 电话号码 */
    phoneNum: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: BookingOrderInfoGender;
    /** 年龄 */
    age: number;
    /** 取消理由 */
    refuseReason: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.bookingData = data["bookingData"] ? moment(data["bookingData"].toString()) : undefined;
            this.hourOfDay = data["hourOfDay"] !== undefined ? data["hourOfDay"] : undefined;
            this.bookingNum = data["bookingNum"] !== undefined ? data["bookingNum"] : undefined;
            this.hint = data["hint"] !== undefined ? data["hint"] : undefined;
            this.customerName = data["customerName"] !== undefined ? data["customerName"] : undefined;
            this.phoneNum = data["phoneNum"] !== undefined ? data["phoneNum"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.gender = data["gender"] !== undefined ? data["gender"] : undefined;
            this.age = data["age"] !== undefined ? data["age"] : undefined;
            this.refuseReason = data["refuseReason"] !== undefined ? data["refuseReason"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): BookingOrderInfo {
        return new BookingOrderInfo(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bookingData"] = this.bookingData ? this.bookingData.toISOString() : undefined;
        data["hourOfDay"] = this.hourOfDay !== undefined ? this.hourOfDay : undefined;
        data["bookingNum"] = this.bookingNum !== undefined ? this.bookingNum : undefined;
        data["hint"] = this.hint !== undefined ? this.hint : undefined;
        data["customerName"] = this.customerName !== undefined ? this.customerName : undefined;
        data["phoneNum"] = this.phoneNum !== undefined ? this.phoneNum : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["gender"] = this.gender !== undefined ? this.gender : undefined;
        data["age"] = this.age !== undefined ? this.age : undefined;
        data["refuseReason"] = this.refuseReason !== undefined ? this.refuseReason : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BookingOrderInfo(JSON.parse(json));
    }
}

export class CancelBookingOrderInput {
    /** 取消理由 */
    refuseReason: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.refuseReason = data["refuseReason"] !== undefined ? data["refuseReason"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CancelBookingOrderInput {
        return new CancelBookingOrderInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["refuseReason"] = this.refuseReason !== undefined ? this.refuseReason : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CancelBookingOrderInput(JSON.parse(json));
    }
}

export class StickedInput {
    /** 置顶/取消 */
    sticked: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.sticked = data["sticked"] !== undefined ? data["sticked"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): StickedInput {
        return new StickedInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["sticked"] = this.sticked !== undefined ? this.sticked : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new StickedInput(JSON.parse(json));
    }
}

export class ListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        return new ListResultDtoOfFlatPermissionWithLevelDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfFlatPermissionWithLevelDto(JSON.parse(json));
    }
}

export class FlatPermissionWithLevelDto {
    /** 权限等级 */
    level: number;
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.level = data["level"] !== undefined ? data["level"] : undefined;
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.isGrantedByDefault = data["isGrantedByDefault"] !== undefined ? data["isGrantedByDefault"] : undefined;
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        return new FlatPermissionWithLevelDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["level"] = this.level !== undefined ? this.level : undefined;
        data["parentName"] = this.parentName !== undefined ? this.parentName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatPermissionWithLevelDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfPictureListDto {
    totalCount: number;
    items: PictureListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PictureListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPictureListDto {
        return new PagedResultDtoOfPictureListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfPictureListDto(JSON.parse(json));
    }
}

export class PictureListDto {
    /** 名称 */
    name: string;
    /** 图片Url */
    originalUrl: string;
    /** 文件 Key(eg:七牛) */
    key: string;
    /** 图片类型 */
    mimeType: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.originalUrl = data["originalUrl"] !== undefined ? data["originalUrl"] : undefined;
            this.key = data["key"] !== undefined ? data["key"] : undefined;
            this.mimeType = data["mimeType"] !== undefined ? data["mimeType"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): PictureListDto {
        return new PictureListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["originalUrl"] = this.originalUrl !== undefined ? this.originalUrl : undefined;
        data["key"] = this.key !== undefined ? this.key : undefined;
        data["mimeType"] = this.mimeType !== undefined ? this.mimeType : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PictureListDto(JSON.parse(json));
    }
}

export class UploadTokenOutput {
    token: string;
    expirationOnUtc: moment.Moment;

    constructor(data?: any) {
        if (data !== undefined) {
            this.token = data["token"] !== undefined ? data["token"] : undefined;
            this.expirationOnUtc = data["expirationOnUtc"] ? moment(data["expirationOnUtc"].toString()) : undefined;
        }
    }

    static fromJS(data: any): UploadTokenOutput {
        return new UploadTokenOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["token"] = this.token !== undefined ? this.token : undefined;
        data["expirationOnUtc"] = this.expirationOnUtc ? this.expirationOnUtc.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UploadTokenOutput(JSON.parse(json));
    }
}

export class CreateOrUpdatePictureInput {
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.key = data["key"] !== undefined ? data["key"] : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.groupId = data["groupId"] !== undefined ? data["groupId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdatePictureInput {
        return new CreateOrUpdatePictureInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["key"] = this.key !== undefined ? this.key : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["groupId"] = this.groupId !== undefined ? this.groupId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdatePictureInput(JSON.parse(json));
    }
}

export class PictureGroupListDto {
    /** 分组名称 */
    name: string;
    /** 图片数量 */
    pictureNum: number;
    /** 是否系统分组 */
    isSystemGroup: boolean;
    /** 创建者Id */
    creatorUserId: number;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.pictureNum = data["pictureNum"] !== undefined ? data["pictureNum"] : undefined;
            this.isSystemGroup = data["isSystemGroup"] !== undefined ? data["isSystemGroup"] : undefined;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): PictureGroupListDto {
        return new PictureGroupListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["pictureNum"] = this.pictureNum !== undefined ? this.pictureNum : undefined;
        data["isSystemGroup"] = this.isSystemGroup !== undefined ? this.isSystemGroup : undefined;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PictureGroupListDto(JSON.parse(json));
    }
}

export class CreateOrUpdatePictureGroupInput {
    name: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdatePictureGroupInput {
        return new CreateOrUpdatePictureGroupInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdatePictureGroupInput(JSON.parse(json));
    }
}

export class CurrentUserProfileEditDto {
    /** 名字 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 时区 */
    timezone: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : undefined;
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        return new CurrentUserProfileEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["timezone"] = this.timezone !== undefined ? this.timezone : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CurrentUserProfileEditDto(JSON.parse(json));
    }
}

export class ChangePasswordInput {
    /** 旧密码 */
    currentPassword: string;
    /** 新密码 */
    newPassword: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.currentPassword = data["currentPassword"] !== undefined ? data["currentPassword"] : undefined;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : undefined;
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        return new ChangePasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : undefined;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangePasswordInput(JSON.parse(json));
    }
}

export class UpdateProfilePictureInput {
    /** ͼƬId */
    pictureId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.pictureId = data["pictureId"] !== undefined ? data["pictureId"] : undefined;
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        return new UpdateProfilePictureInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["pictureId"] = this.pictureId !== undefined ? this.pictureId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateProfilePictureInput(JSON.parse(json));
    }
}

export class GetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: any) {
        if (data !== undefined) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        return new GetPasswordComplexitySettingOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["setting"] = this.setting ? this.setting.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetPasswordComplexitySettingOutput(JSON.parse(json));
    }
}

export class GetProfilePictureOutput {
    profilePicture: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.profilePicture = data["profilePicture"] !== undefined ? data["profilePicture"] : undefined;
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        return new GetProfilePictureOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["profilePicture"] = this.profilePicture !== undefined ? this.profilePicture : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetProfilePictureOutput(JSON.parse(json));
    }
}

export class ChangeUserLanguageDto {
    /** 语言名称 */
    languageName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : undefined;
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        return new ChangeUserLanguageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["languageName"] = this.languageName !== undefined ? this.languageName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUserLanguageDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfRoleListDto {
    totalCount: number;
    items: RoleListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleListDto {
        return new PagedResultDtoOfRoleListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfRoleListDto(JSON.parse(json));
    }
}

export class RoleListDto {
    /** 角色名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 是否为系统角色 */
    isStatic: boolean;
    /** 是否默认分配(给用户) */
    isDefault: boolean;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : undefined;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): RoleListDto {
        return new RoleListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : undefined;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleListDto(JSON.parse(json));
    }
}

export class GetRoleForEditOutput {
    /** 角色详情 */
    role: RoleEditDto;
    /** 权限集合 */
    permissions: FlatPermissionDto[];
    /** 赋予权限名称集合 */
    grantedPermissionNames: string[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        return new GetRoleForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["role"] = this.role ? this.role.toJS() : undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetRoleForEditOutput(JSON.parse(json));
    }
}

export class RoleEditDto {
    /** 角色Id(可空) */
    id: number;
    /** 显示名 */
    displayName: string;
    /** 是否默认 */
    isDefault: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : undefined;
        }
    }

    static fromJS(data: any): RoleEditDto {
        return new RoleEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleEditDto(JSON.parse(json));
    }
}

export class FlatPermissionDto {
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.isGrantedByDefault = data["isGrantedByDefault"] !== undefined ? data["isGrantedByDefault"] : undefined;
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        return new FlatPermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentName"] = this.parentName !== undefined ? this.parentName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatPermissionDto(JSON.parse(json));
    }
}

export class CreateOrUpdateRoleInput {
    /** 角色详情 */
    role: RoleEditDto = new RoleEditDto();
    /** 授予权限 */
    grantedPermissionNames: string[] = [];

    constructor(data?: any) {
        if (data !== undefined) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        return new CreateOrUpdateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["role"] = this.role ? this.role.toJS() : undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateRoleInput(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: any) {
        if (data !== undefined) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["user"] = this.user ? this.user.toJS() : undefined;
        data["tenant"] = this.tenant ? this.tenant.toJS() : undefined;
        data["application"] = this.application ? this.application.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class UserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    logoId: number;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.editionDisplayName = data["editionDisplayName"] !== undefined ? data["editionDisplayName"] : undefined;
            this.logoId = data["logoId"] !== undefined ? data["logoId"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["editionDisplayName"] = this.editionDisplayName !== undefined ? this.editionDisplayName : undefined;
        data["logoId"] = this.logoId !== undefined ? this.logoId : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class ApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };

    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : undefined;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key] !== undefined ? data["features"][key] : undefined;
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : undefined;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : undefined;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

/** 批量发送短信 */
export class BatchSendSMSInput {
    /** 目标号码数组 */
    targetNumbers: string[];
    /** 内容 */
    content: string;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["targetNumbers"] && data["targetNumbers"].constructor === Array) {
                this.targetNumbers = [];
                for (let item of data["targetNumbers"])
                    this.targetNumbers.push(item);
            }
            this.content = data["content"] !== undefined ? data["content"] : undefined;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : undefined;
        }
    }

    static fromJS(data: any): BatchSendSMSInput {
        return new BatchSendSMSInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.targetNumbers && this.targetNumbers.constructor === Array) {
            data["targetNumbers"] = [];
            for (let item of this.targetNumbers)
                data["targetNumbers"].push(item);
        }
        data["content"] = this.content !== undefined ? this.content : undefined;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BatchSendSMSInput(JSON.parse(json));
    }
}

export class SendResult {
    success: boolean;
    errorMessage: string;
    successCount: number;
    failCount: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.success = data["success"] !== undefined ? data["success"] : undefined;
            this.errorMessage = data["errorMessage"] !== undefined ? data["errorMessage"] : undefined;
            this.successCount = data["successCount"] !== undefined ? data["successCount"] : undefined;
            this.failCount = data["failCount"] !== undefined ? data["failCount"] : undefined;
        }
    }

    static fromJS(data: any): SendResult {
        return new SendResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["success"] = this.success !== undefined ? this.success : undefined;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : undefined;
        data["successCount"] = this.successCount !== undefined ? this.successCount : undefined;
        data["failCount"] = this.failCount !== undefined ? this.failCount : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendResult(JSON.parse(json));
    }
}

export class CodeSendInput {
    /** 目标号码(数组) */
    targetNumber: string;
    /** 验证码类型 */
    codeType: CodeSendInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.targetNumber = data["targetNumber"] !== undefined ? data["targetNumber"] : undefined;
            this.codeType = data["codeType"] !== undefined ? data["codeType"] : undefined;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : undefined;
        }
    }

    static fromJS(data: any): CodeSendInput {
        return new CodeSendInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["targetNumber"] = this.targetNumber !== undefined ? this.targetNumber : undefined;
        data["codeType"] = this.codeType !== undefined ? this.codeType : undefined;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CodeSendInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfSMSTemplateListDto {
    totalCount: number;
    items: SMSTemplateListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSMSTemplateListDto {
        return new PagedResultDtoOfSMSTemplateListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfSMSTemplateListDto(JSON.parse(json));
    }
}

export class SMSTemplateListDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    /** 是否激活 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.templateCode = data["templateCode"] !== undefined ? data["templateCode"] : undefined;
            this.smsProvider = data["smsProvider"] !== undefined ? data["smsProvider"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): SMSTemplateListDto {
        return new SMSTemplateListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["templateCode"] = this.templateCode !== undefined ? this.templateCode : undefined;
        data["smsProvider"] = this.smsProvider !== undefined ? this.smsProvider : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SMSTemplateListDto(JSON.parse(json));
    }
}

export class GetSMSTemplateForEditDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: moment.Moment;
    /** 最后修改时间 */
    lastModificationTime: moment.Moment;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemDto[];
    /** 可用的短信供应商 */
    availabelSmsProviders: SMSProviderInfoDto[];
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.templateCode = data["templateCode"] !== undefined ? data["templateCode"] : undefined;
            this.smsProvider = data["smsProvider"] !== undefined ? data["smsProvider"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateItemDto.fromJS(item));
            }
            if (data["availabelSmsProviders"] && data["availabelSmsProviders"].constructor === Array) {
                this.availabelSmsProviders = [];
                for (let item of data["availabelSmsProviders"])
                    this.availabelSmsProviders.push(SMSProviderInfoDto.fromJS(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): GetSMSTemplateForEditDto {
        return new GetSMSTemplateForEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["templateCode"] = this.templateCode !== undefined ? this.templateCode : undefined;
        data["smsProvider"] = this.smsProvider !== undefined ? this.smsProvider : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        if (this.availabelSmsProviders && this.availabelSmsProviders.constructor === Array) {
            data["availabelSmsProviders"] = [];
            for (let item of this.availabelSmsProviders)
                data["availabelSmsProviders"].push(item.toJS());
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetSMSTemplateForEditDto(JSON.parse(json));
    }
}

export class SMSTemplateItemDto {
    /** 创建时间 */
    creationTime: moment.Moment;
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.dataItemName = data["dataItemName"] !== undefined ? data["dataItemName"] : undefined;
            this.dataItemValue = data["dataItemValue"] !== undefined ? data["dataItemValue"] : undefined;
        }
    }

    static fromJS(data: any): SMSTemplateItemDto {
        return new SMSTemplateItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["dataItemName"] = this.dataItemName !== undefined ? this.dataItemName : undefined;
        data["dataItemValue"] = this.dataItemValue !== undefined ? this.dataItemValue : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SMSTemplateItemDto(JSON.parse(json));
    }
}

export class SMSProviderInfoDto {
    /** 名称(显示名称) */
    displayName: string;
    /** 系统名称 */
    systemName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : undefined;
            this.systemName = data["systemName"] !== undefined ? data["systemName"] : undefined;
        }
    }

    static fromJS(data: any): SMSProviderInfoDto {
        return new SMSProviderInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["displayName"] = this.displayName !== undefined ? this.displayName : undefined;
        data["systemName"] = this.systemName !== undefined ? this.systemName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SMSProviderInfoDto(JSON.parse(json));
    }
}

export class CreateOrUpdateSMSTemplateInput {
    /** 模板Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemInput[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.templateCode = data["templateCode"] !== undefined ? data["templateCode"] : undefined;
            this.smsProvider = data["smsProvider"] !== undefined ? data["smsProvider"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateItemInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateSMSTemplateInput {
        return new CreateOrUpdateSMSTemplateInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["templateCode"] = this.templateCode !== undefined ? this.templateCode : undefined;
        data["smsProvider"] = this.smsProvider !== undefined ? this.smsProvider : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateSMSTemplateInput(JSON.parse(json));
    }
}

export class SMSTemplateItemInput {
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.dataItemName = data["dataItemName"] !== undefined ? data["dataItemName"] : undefined;
            this.dataItemValue = data["dataItemValue"] !== undefined ? data["dataItemValue"] : undefined;
        }
    }

    static fromJS(data: any): SMSTemplateItemInput {
        return new SMSTemplateItemInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["dataItemName"] = this.dataItemName !== undefined ? this.dataItemName : undefined;
        data["dataItemValue"] = this.dataItemValue !== undefined ? this.dataItemValue : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SMSTemplateItemInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfProvinceListDto {
    totalCount: number;
    items: ProvinceListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProvinceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProvinceListDto {
        return new PagedResultDtoOfProvinceListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfProvinceListDto(JSON.parse(json));
    }
}

export class ProvinceListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): ProvinceListDto {
        return new ProvinceListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProvinceListDto(JSON.parse(json));
    }
}

export class CreateOrUpdateProvinceInput {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateProvinceInput {
        return new CreateOrUpdateProvinceInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateProvinceInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfCityListDto {
    totalCount: number;
    items: CityListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCityListDto {
        return new PagedResultDtoOfCityListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfCityListDto(JSON.parse(json));
    }
}

export class CityListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CityListDto {
        return new CityListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CityListDto(JSON.parse(json));
    }
}

export class CreateOrUpdateCityInput {
    /** 省份id */
    provinceId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.provinceId = data["provinceId"] !== undefined ? data["provinceId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateCityInput {
        return new CreateOrUpdateCityInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["provinceId"] = this.provinceId !== undefined ? this.provinceId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateCityInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfDistrictListDto {
    totalCount: number;
    items: DistrictListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DistrictListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDistrictListDto {
        return new PagedResultDtoOfDistrictListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfDistrictListDto(JSON.parse(json));
    }
}

export class DistrictListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): DistrictListDto {
        return new DistrictListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DistrictListDto(JSON.parse(json));
    }
}

export class CreateOrUpdateDistrictInput {
    /** 城市id */
    cityId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.cityId = data["cityId"] !== undefined ? data["cityId"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.display = data["display"] !== undefined ? data["display"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateDistrictInput {
        return new CreateOrUpdateDistrictInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["cityId"] = this.cityId !== undefined ? this.cityId : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["display"] = this.display !== undefined ? this.display : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateDistrictInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        return new PagedResultDtoOfTenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfTenantListDto(JSON.parse(json));
    }
}

export class TenantListDto {
    /** 租户名 */
    tenancyName: string;
    /** (显示)名称 */
    name: string;
    /** 版本名 */
    editionDisplayName: string;
    /** 连接字符串 */
    connectionString: string;
    /** 是否激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.editionDisplayName = data["editionDisplayName"] !== undefined ? data["editionDisplayName"] : undefined;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantListDto {
        return new TenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["editionDisplayName"] = this.editionDisplayName !== undefined ? this.editionDisplayName : undefined;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantListDto(JSON.parse(json));
    }
}

export class CreateTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 管理员邮箱地址 */
    adminEmailAddress: string;
    /** 管理员手机号码 */
    phoneNumber: string;
    /** 管理员密码 */
    adminPassword: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.adminPassword = data["adminPassword"] !== undefined ? data["adminPassword"] : undefined;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : undefined;
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"] !== undefined ? data["shouldChangePasswordOnNextLogin"] : undefined;
            this.sendActivationEmail = data["sendActivationEmail"] !== undefined ? data["sendActivationEmail"] : undefined;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
        }
    }

    static fromJS(data: any): CreateTenantInput {
        return new CreateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["adminPassword"] = this.adminPassword !== undefined ? this.adminPassword : undefined;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : undefined;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin !== undefined ? this.shouldChangePasswordOnNextLogin : undefined;
        data["sendActivationEmail"] = this.sendActivationEmail !== undefined ? this.sendActivationEmail : undefined;
        data["editionId"] = this.editionId !== undefined ? this.editionId : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantInput(JSON.parse(json));
    }
}

export class GetTenantForEditOutput {
    /** 租户详情 */
    tenant: TenantEditDto;
    /** 特性(限制) */
    features: GetTenantFeaturesForEditOutput;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenant = data["tenant"] ? TenantEditDto.fromJS(data["tenant"]) : undefined;
            this.features = data["features"] ? GetTenantFeaturesForEditOutput.fromJS(data["features"]) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): GetTenantForEditOutput {
        return new GetTenantForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenant"] = this.tenant ? this.tenant.toJS() : undefined;
        data["features"] = this.features ? this.features.toJS() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetTenantForEditOutput(JSON.parse(json));
    }
}

export class TenantEditDto {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;
    /** 已有(设置的)特性值,更新时要赋值 */
    features: NameValueDto[];
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : undefined;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(NameValueDto.fromJS(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): TenantEditDto {
        return new TenantEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : undefined;
        data["editionId"] = this.editionId !== undefined ? this.editionId : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantEditDto(JSON.parse(json));
    }
}

export class GetTenantFeaturesForEditOutput {
    /** 已有(设置的)特性值,更新时要赋值 */
    featureValues: NameValueDto[];
    /** 所有特性值 */
    features: FlatFeatureDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesForEditOutput {
        return new GetTenantFeaturesForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetTenantFeaturesForEditOutput(JSON.parse(json));
    }
}

export class UpdateTenantFeaturesInput {
    /** 租户Id */
    id: number;
    /** 特性 */
    featureValues: NameValueDto[] = [];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        return new UpdateTenantFeaturesInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateTenantFeaturesInput(JSON.parse(json));
    }
}

export class EntityDto {
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): EntityDto {
        return new EntityDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDto(JSON.parse(json));
    }
}

export class GetMemberActivityOutput {
    totalMembers: number[];
    newMembers: number[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["totalMembers"] && data["totalMembers"].constructor === Array) {
                this.totalMembers = [];
                for (let item of data["totalMembers"])
                    this.totalMembers.push(item);
            }
            if (data["newMembers"] && data["newMembers"].constructor === Array) {
                this.newMembers = [];
                for (let item of data["newMembers"])
                    this.newMembers.push(item);
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        return new GetMemberActivityOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.totalMembers && this.totalMembers.constructor === Array) {
            data["totalMembers"] = [];
            for (let item of this.totalMembers)
                data["totalMembers"].push(item);
        }
        if (this.newMembers && this.newMembers.constructor === Array) {
            data["newMembers"] = [];
            for (let item of this.newMembers)
                data["newMembers"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetMemberActivityOutput(JSON.parse(json));
    }
}

export class TenantInfoEditDto {
    /** 机构名称/租户名 */
    tenancyName: string;
    /** 宣传语 */
    tagline: string;
    /** 描述 */
    description: string;
    /** Logo 图片 Id */
    logoId: number;
    /** Logo 图片 Url */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureId: number;
    /** 背景图片 Url */
    backgroundPictureUrl: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.tagline = data["tagline"] !== undefined ? data["tagline"] : undefined;
            this.description = data["description"] !== undefined ? data["description"] : undefined;
            this.logoId = data["logoId"] !== undefined ? data["logoId"] : undefined;
            this.logoUrl = data["logoUrl"] !== undefined ? data["logoUrl"] : undefined;
            this.backgroundPictureId = data["backgroundPictureId"] !== undefined ? data["backgroundPictureId"] : undefined;
            this.backgroundPictureUrl = data["backgroundPictureUrl"] !== undefined ? data["backgroundPictureUrl"] : undefined;
        }
    }

    static fromJS(data: any): TenantInfoEditDto {
        return new TenantInfoEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["tagline"] = this.tagline !== undefined ? this.tagline : undefined;
        data["description"] = this.description !== undefined ? this.description : undefined;
        data["logoId"] = this.logoId !== undefined ? this.logoId : undefined;
        data["logoUrl"] = this.logoUrl !== undefined ? this.logoUrl : undefined;
        data["backgroundPictureId"] = this.backgroundPictureId !== undefined ? this.backgroundPictureId : undefined;
        data["backgroundPictureUrl"] = this.backgroundPictureUrl !== undefined ? this.backgroundPictureUrl : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantInfoEditDto(JSON.parse(json));
    }
}

export class RegisterTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 管理员密码 */
    password: string;
    /** 验证码结果 */
    captchaResponse: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.registerCode = data["registerCode"] !== undefined ? data["registerCode"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : undefined;
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        return new RegisterTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["registerCode"] = this.registerCode !== undefined ? this.registerCode : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterTenantInput(JSON.parse(json));
    }
}

export class RegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.isTenantActive = data["isTenantActive"] !== undefined ? data["isTenantActive"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"] !== undefined ? data["isEmailConfirmationRequired"] : undefined;
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        return new RegisterTenantOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["isTenantActive"] = this.isTenantActive !== undefined ? this.isTenantActive : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired !== undefined ? this.isEmailConfirmationRequired : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterTenantOutput(JSON.parse(json));
    }
}

export class TenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto();
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    /** 安全设置 */
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto;

    constructor(data?: any) {
        if (data !== undefined) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : undefined;
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        return new TenantSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["general"] = this.general ? this.general.toJS() : undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJS() : undefined;
        data["email"] = this.email ? this.email.toJS() : undefined;
        data["ldap"] = this.ldap ? this.ldap.toJS() : undefined;
        data["security"] = this.security ? this.security.toJS() : undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantSettingsEditDto(JSON.parse(json));
    }
}

export class TenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.allowSelfRegistration = data["allowSelfRegistration"] !== undefined ? data["allowSelfRegistration"] : undefined;
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"] !== undefined ? data["isNewRegisteredUserActiveByDefault"] : undefined;
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"] !== undefined ? data["isEmailConfirmationRequiredForLogin"] : undefined;
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"] !== undefined ? data["useCaptchaOnRegistration"] : undefined;
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        return new TenantUserManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["allowSelfRegistration"] = this.allowSelfRegistration !== undefined ? this.allowSelfRegistration : undefined;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault !== undefined ? this.isNewRegisteredUserActiveByDefault : undefined;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin !== undefined ? this.isEmailConfirmationRequiredForLogin : undefined;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration !== undefined ? this.useCaptchaOnRegistration : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantUserManagementSettingsEditDto(JSON.parse(json));
    }
}

/** LADP（活动目录）设置 */
export class LdapSettingsEditDto {
    /** 模块是否可用(.net core 1.1 不可用) */
    isModuleEnabled: boolean;
    /** 启用 */
    isEnabled: boolean;
    /** 域名 */
    domain: string;
    /** 用户名 */
    userName: string;
    /** 密码 */
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.isModuleEnabled = data["isModuleEnabled"] !== undefined ? data["isModuleEnabled"] : undefined;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : undefined;
            this.domain = data["domain"] !== undefined ? data["domain"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        return new LdapSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isModuleEnabled"] = this.isModuleEnabled !== undefined ? this.isModuleEnabled : undefined;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : undefined;
        data["domain"] = this.domain !== undefined ? this.domain : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LdapSettingsEditDto(JSON.parse(json));
    }
}

export class ListResultDtoOfNameValueDto {
    items: NameValueDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        return new ListResultDtoOfNameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfNameValueDto(JSON.parse(json));
    }
}

export class AuthenticateModel {
    /** 登陆凭证(用户名/邮箱地址/手机) */
    loginCertificate: string;
    /** 密码 */
    password: string;
    /** 双重认证码 */
    twoFactorVerificationCode: string;
    /** 在客户端记住 */
    rememberClient: boolean;
    /** 双重认证在客户端记住 */
    twoFactorRememberClientToken: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.loginCertificate = data["loginCertificate"] !== undefined ? data["loginCertificate"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"] !== undefined ? data["twoFactorVerificationCode"] : undefined;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : undefined;
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"] !== undefined ? data["twoFactorRememberClientToken"] : undefined;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["loginCertificate"] = this.loginCertificate !== undefined ? this.loginCertificate : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode !== undefined ? this.twoFactorVerificationCode : undefined;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : undefined;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken !== undefined ? this.twoFactorRememberClientToken : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间 */
    expireInSeconds: number;
    /** 需要重置密码 */
    shouldResetPassword: boolean;
    /** 密码重置码 */
    passwordResetCode: string;
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 需要双重验证 */
    requiresTwoFactorVerification: boolean;
    /** 双重认证供应商 */
    twoFactorAuthProviders: string[];
    /** 记住双重认证 Token */
    twoFactorRememberClientToken: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
            this.shouldResetPassword = data["shouldResetPassword"] !== undefined ? data["shouldResetPassword"] : undefined;
            this.passwordResetCode = data["passwordResetCode"] !== undefined ? data["passwordResetCode"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"] !== undefined ? data["requiresTwoFactorVerification"] : undefined;
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"] !== undefined ? data["twoFactorRememberClientToken"] : undefined;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        data["shouldResetPassword"] = this.shouldResetPassword !== undefined ? this.shouldResetPassword : undefined;
        data["passwordResetCode"] = this.passwordResetCode !== undefined ? this.passwordResetCode : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification !== undefined ? this.requiresTwoFactorVerification : undefined;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken !== undefined ? this.twoFactorRememberClientToken : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class SendTwoFactorAuthCodeModel {
    /** 用户Id */
    userId: number;
    /** 供应商（email/sms） */
    provider: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.provider = data["provider"] !== undefined ? data["provider"] : undefined;
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        return new SendTwoFactorAuthCodeModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["provider"] = this.provider !== undefined ? this.provider : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendTwoFactorAuthCodeModel(JSON.parse(json));
    }
}

export class ImpersonatedAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间(秒) */
    expireInSeconds: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        return new ImpersonatedAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonatedAuthenticateResultModel(JSON.parse(json));
    }
}

/** 切换账号认证 - 结果 */
export class SwitchedAccountAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        return new SwitchedAccountAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchedAccountAuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel {
    /** 名称 */
    name: string;
    /** 客户端Id */
    clientId: string;
    /** 是否在登录界面显示 */
    showOnLoginPage: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : undefined;
            this.showOnLoginPage = data["showOnLoginPage"] !== undefined ? data["showOnLoginPage"] : undefined;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["clientId"] = this.clientId !== undefined ? this.clientId : undefined;
        data["showOnLoginPage"] = this.showOnLoginPage !== undefined ? this.showOnLoginPage : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : undefined;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : undefined;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : undefined;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;
    /** 等待激活 */
    waitingForActivation: boolean;
    /** 需要补充注册 */
    needSupplementary: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : undefined;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : undefined;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : undefined;
            this.needSupplementary = data["needSupplementary"] !== undefined ? data["needSupplementary"] : undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : undefined;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : undefined;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : undefined;
        data["needSupplementary"] = this.needSupplementary !== undefined ? this.needSupplementary : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

/** 补充认证 */
export class SupplementaryExternalAuthModel {
    /** 用户Id */
    userId: number;
    /** 邮箱地址 */
    emailAddress: string;
    /** 用户名 */
    userName: string;
    /** 手机号 */
    phoneNumber: string;
    /** 密码 */
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): SupplementaryExternalAuthModel {
        return new SupplementaryExternalAuthModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SupplementaryExternalAuthModel(JSON.parse(json));
    }
}

export class SupplementaryExternalAuthResultModel {
    /** 能否登陆 */
    canLogin: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : undefined;
        }
    }

    static fromJS(data: any): SupplementaryExternalAuthResultModel {
        return new SupplementaryExternalAuthResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SupplementaryExternalAuthResultModel(JSON.parse(json));
    }
}

export class PagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        return new PagedResultDtoOfUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfUserListDto(JSON.parse(json));
    }
}

export class UserListDto {
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 头像图片Id */
    profilePictureId: number;
    /** 是否确认邮箱 */
    isEmailConfirmed: boolean;
    /** 角色 */
    roles: UserListRoleDto[];
    /** 最后登陆时间 */
    lastLoginTime: moment.Moment;
    /** 是否已激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : undefined;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): UserListDto {
        return new UserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : undefined;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListDto(JSON.parse(json));
    }
}

export class UserListRoleDto {
    /** 角色Id */
    roleId: number;
    /** 角色名称 */
    roleName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : undefined;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : undefined;
        }
    }

    static fromJS(data: any): UserListRoleDto {
        return new UserListRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : undefined;
        data["roleName"] = this.roleName !== undefined ? this.roleName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListRoleDto(JSON.parse(json));
    }
}

export class GetUserForEditOutput {
    /** 头像图片Id */
    profilePictureId: number;
    /** 用户资料 */
    user: UserEditDto;
    /** 角色 */
    roles: UserRoleDto[];
    /** 权限 */
    permissions: GetUserPermissionsForEditOutput;
    /** 第三方登陆绑定记录 */
    externalLogins: ExternalUserLoginDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : undefined;
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
            this.permissions = data["permissions"] ? GetUserPermissionsForEditOutput.fromJS(data["permissions"]) : undefined;
            if (data["externalLogins"] && data["externalLogins"].constructor === Array) {
                this.externalLogins = [];
                for (let item of data["externalLogins"])
                    this.externalLogins.push(ExternalUserLoginDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        return new GetUserForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : undefined;
        data["user"] = this.user ? this.user.toJS() : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        data["permissions"] = this.permissions ? this.permissions.toJS() : undefined;
        if (this.externalLogins && this.externalLogins.constructor === Array) {
            data["externalLogins"] = [];
            for (let item of this.externalLogins)
                data["externalLogins"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserForEditOutput(JSON.parse(json));
    }
}

export class UserEditDto {
    /** 用户Id，null时为创建用户,有值时为更新用户 */
    id: number;
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 密码
<remarks>
不要给这属性添加 Required 特性,因为 这个属性空值时表示代表不修改密码
</remarks> */
    password: string;
    /** 激活 */
    isActive: boolean;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 启用双重验证 */
    isTwoFactorEnabled: boolean;
    /** 是否启用用户锁定 */
    isLockoutEnabled: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.name = data["name"] !== undefined ? data["name"] : undefined;
            this.surname = data["surname"] !== undefined ? data["surname"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : undefined;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : undefined;
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"] !== undefined ? data["shouldChangePasswordOnNextLogin"] : undefined;
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"] !== undefined ? data["isTwoFactorEnabled"] : undefined;
            this.isLockoutEnabled = data["isLockoutEnabled"] !== undefined ? data["isLockoutEnabled"] : undefined;
        }
    }

    static fromJS(data: any): UserEditDto {
        return new UserEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["name"] = this.name !== undefined ? this.name : undefined;
        data["surname"] = this.surname !== undefined ? this.surname : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : undefined;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        data["isActive"] = this.isActive !== undefined ? this.isActive : undefined;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin !== undefined ? this.shouldChangePasswordOnNextLogin : undefined;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled !== undefined ? this.isTwoFactorEnabled : undefined;
        data["isLockoutEnabled"] = this.isLockoutEnabled !== undefined ? this.isLockoutEnabled : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserEditDto(JSON.parse(json));
    }
}

/** 用户角色 */
export class UserRoleDto {
    /** 角色Id/唯一凭证 */
    roleId: number;
    /** 角色名/系统名 */
    roleName: string;
    /** 显示名称 */
    roleDisplayName: string;
    /** 是否默认分配角色 */
    isAssigned: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : undefined;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : undefined;
            this.roleDisplayName = data["roleDisplayName"] !== undefined ? data["roleDisplayName"] : undefined;
            this.isAssigned = data["isAssigned"] !== undefined ? data["isAssigned"] : undefined;
        }
    }

    static fromJS(data: any): UserRoleDto {
        return new UserRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : undefined;
        data["roleName"] = this.roleName !== undefined ? this.roleName : undefined;
        data["roleDisplayName"] = this.roleDisplayName !== undefined ? this.roleDisplayName : undefined;
        data["isAssigned"] = this.isAssigned !== undefined ? this.isAssigned : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserRoleDto(JSON.parse(json));
    }
}

export class GetUserPermissionsForEditOutput {
    /** 现有权限 */
    permissions: FlatPermissionDto[];
    /** 授予权限名称 */
    grantedPermissionNames: string[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        return new GetUserPermissionsForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserPermissionsForEditOutput(JSON.parse(json));
    }
}

export class ExternalUserLoginDto {
    /** 唯一凭证 */
    id: number;
    /** 第三方登陆类型 */
    loginProvider: string;
    /** OpenId/唯一凭证 */
    providerKey: string;
    /** 用户名 */
    userName: string;
    /** 第三方接口调用凭证 */
    accessToken: string;
    /** 刷新凭证 */
    refreshToken: string;
    /** 调用凭证过期时间 */
    accessTokenOutDataTime: moment.Moment;
    /** 创建时间 */
    creationTime: moment.Moment;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            this.loginProvider = data["loginProvider"] !== undefined ? data["loginProvider"] : undefined;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : undefined;
            this.userName = data["userName"] !== undefined ? data["userName"] : undefined;
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : undefined;
            this.refreshToken = data["refreshToken"] !== undefined ? data["refreshToken"] : undefined;
            this.accessTokenOutDataTime = data["accessTokenOutDataTime"] ? moment(data["accessTokenOutDataTime"].toString()) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
        }
    }

    static fromJS(data: any): ExternalUserLoginDto {
        return new ExternalUserLoginDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        data["loginProvider"] = this.loginProvider !== undefined ? this.loginProvider : undefined;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        data["userName"] = this.userName !== undefined ? this.userName : undefined;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : undefined;
        data["refreshToken"] = this.refreshToken !== undefined ? this.refreshToken : undefined;
        data["accessTokenOutDataTime"] = this.accessTokenOutDataTime ? this.accessTokenOutDataTime.toISOString() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalUserLoginDto(JSON.parse(json));
    }
}

export class UpdateUserPermissionsInput {
    /** 用户Id */
    id: number;
    /** 授予权限 */
    grantedPermissionNames: string[] = [];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : undefined;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        return new UpdateUserPermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserPermissionsInput(JSON.parse(json));
    }
}

export class CreateOrUpdateUserInput {
    /** 用户基本信息 */
    user: UserEditDto = new UserEditDto();
    /** 分配角色名称 */
    assignedRoleNames: string[] = [];
    /** 授予权限 */
    grantedPermissionNames: string[];
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 设置随机密码 */
    setRandomPassword: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"] !== undefined ? data["sendActivationEmail"] : undefined;
            this.setRandomPassword = data["setRandomPassword"] !== undefined ? data["setRandomPassword"] : undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        return new CreateOrUpdateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["user"] = this.user ? this.user.toJS() : undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail !== undefined ? this.sendActivationEmail : undefined;
        data["setRandomPassword"] = this.setRandomPassword !== undefined ? this.setRandomPassword : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateUserInput(JSON.parse(json));
    }
}

export class LinkToUserInput {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱地址 */
    usernameOrEmailAddress: string;
    /** 密码 */
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"] !== undefined ? data["usernameOrEmailAddress"] : undefined;
            this.password = data["password"] !== undefined ? data["password"] : undefined;
        }
    }

    static fromJS(data: any): LinkToUserInput {
        return new LinkToUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress !== undefined ? this.usernameOrEmailAddress : undefined;
        data["password"] = this.password !== undefined ? this.password : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LinkToUserInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        return new PagedResultDtoOfLinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfLinkedUserDto(JSON.parse(json));
    }
}

/** 关联账号 */
export class LinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.username = data["username"] !== undefined ? data["username"] : undefined;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : undefined;
            this.id = data["id"] !== undefined ? data["id"] : undefined;
        }
    }

    static fromJS(data: any): LinkedUserDto {
        return new LinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["username"] = this.username !== undefined ? this.username : undefined;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LinkedUserDto(JSON.parse(json));
    }
}

export class ListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        return new ListResultDtoOfLinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfLinkedUserDto(JSON.parse(json));
    }
}

export class UnlinkUserInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id */
    userId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : undefined;
            this.userId = data["userId"] !== undefined ? data["userId"] : undefined;
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        return new UnlinkUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : undefined;
        data["userId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UnlinkUserInput(JSON.parse(json));
    }
}

export class ListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        return new ListResultDtoOfUserLoginAttemptDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfUserLoginAttemptDto(JSON.parse(json));
    }
}

/** 用户登陆尝试 */
export class UserLoginAttemptDto {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱 */
    userNameOrEmail: string;
    /** 客户端Ip地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 结果 */
    result: string;
    /** 创建时间 */
    creationTime: moment.Moment;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : undefined;
            this.userNameOrEmail = data["userNameOrEmail"] !== undefined ? data["userNameOrEmail"] : undefined;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : undefined;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : undefined;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : undefined;
            this.result = data["result"] !== undefined ? data["result"] : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        return new UserLoginAttemptDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : undefined;
        data["userNameOrEmail"] = this.userNameOrEmail !== undefined ? this.userNameOrEmail : undefined;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : undefined;
        data["clientName"] = this.clientName !== undefined ? this.clientName : undefined;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : undefined;
        data["result"] = this.result !== undefined ? this.result : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginAttemptDto(JSON.parse(json));
    }
}

export class GetLatestWebLogsOutput {
    latesWebLogLines: string[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["latesWebLogLines"] && data["latesWebLogLines"].constructor === Array) {
                this.latesWebLogLines = [];
                for (let item of data["latesWebLogLines"])
                    this.latesWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        return new GetLatestWebLogsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.latesWebLogLines && this.latesWebLogLines.constructor === Array) {
            data["latesWebLogLines"] = [];
            for (let item of this.latesWebLogLines)
                data["latesWebLogLines"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLatestWebLogsOutput(JSON.parse(json));
    }
}

/** 通知状态（可空） */
export enum State {
    _0 = 0, 
    _1 = 1, 
}

/** 性别 */
export enum Gender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum Status {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

/** 性别 */
export enum Gender2 {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum Status2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum Status3 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

/** 默认时区有效范围 */
export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum JoinBookingInputGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum BookingOrderListDtoStatus {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum BookingOrderInfoGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum CodeSendInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}